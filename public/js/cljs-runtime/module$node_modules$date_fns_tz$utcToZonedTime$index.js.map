{
"version":3,
"file":"module$node_modules$date_fns_tz$utcToZonedTime$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYjHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CATrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAgCAI,QAAuB,CAACC,SAAD,CAAYC,QAAZ,CAAsBC,OAAtB,CAA+B,CAChDC,SAAAA,CAAO,GAAIC,OAAQT,CAAAA,OAAZ,EAAqBK,SAArB,CAAgCE,OAAhC,CACPG,SAAAA,CAAqB,GAAIC,gBAAiBX,CAAAA,OAArB,EAA8BM,QAA9B,CAAwCE,SAAxC,CAA8C,CAAA,CAA9C,CAArBE,EAA4E,CAC5EE,SAAAA,CAAI,IAAIC,IAAJ,CAASL,SAAKM,CAAAA,OAAL,EAAT,CAA0BJ,QAA1B,CAER,OADgBK,KAAIF,IAAJE,CAASH,QAAEI,CAAAA,cAAF,EAATD;AAA6BH,QAAEK,CAAAA,WAAF,EAA7BF,CAA8CH,QAAEM,CAAAA,UAAF,EAA9CH,CAA8DH,QAAEO,CAAAA,WAAF,EAA9DJ,CAA+EH,QAAEQ,CAAAA,aAAF,EAA/EL,CAAkGH,QAAES,CAAAA,aAAF,EAAlGN,CAAqHH,QAAEU,CAAAA,kBAAF,EAArHP,CAJoC,CA9BtD,KAAIJ,iBAAmBd,sBAAA,CAAuBH,OAAA,CAAQ,4DAAR,CAAvB,CAAvB,CAEIe,QAAUZ,sBAAA,CAAuBH,OAAA,CAAQ,8CAAR,CAAvB,CAoCdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA9CwF;",
"sources":["node_modules/date-fns-tz/utcToZonedTime/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns_tz$utcToZonedTime$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = utcToZonedTime;\n\nvar _tzParseTimezone = _interopRequireDefault(require(\"../_lib/tzParseTimezone\"));\n\nvar _toDate = _interopRequireDefault(require(\"../toDate\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nfunction utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = (0, _toDate.default)(dirtyDate, options);\n  var offsetMilliseconds = (0, _tzParseTimezone.default)(timeZone, date, true) || 0;\n  var d = new Date(date.getTime() - offsetMilliseconds);\n  var zonedTime = new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n  return zonedTime;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","utcToZonedTime","dirtyDate","timeZone","options","date","_toDate","offsetMilliseconds","_tzParseTimezone","d","Date","getTime","zonedTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds"]
}
