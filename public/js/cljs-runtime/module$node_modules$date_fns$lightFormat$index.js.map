{
"version":3,
"file":"module$node_modules$date_fns$lightFormat$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAoB3GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAjBrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAqFAI,QAAoB,CAACC,SAAD,CAAYC,SAAZ,CAAuB,CACzC,GAAIC,OAAQP,CAAAA,OAAZ,EAAqB,CAArB,CAAwBQ,SAAxB,CACA,KAAIC,aAAe,GAAIC,MAAOV,CAAAA,OAAX,EAAoBK,SAApB,CAEnB,IAAI,CAAC,GAAIM,OAAQX,CAAAA,OAAZ,EAAqBS,YAArB,CAAL,CACE,KAAM,KAAIG,UAAJ,CAAe,oBAAf,CAAN,CAMF,IAAIC,eAAiB,GAAIC,OAAQd,CAAAA,OAAZ,EAAqBS,YAArB,CAArB,CACIM;AAAU,GAAIC,OAAQhB,CAAAA,OAAZ,EAAqBS,YAArB,CAAmCI,cAAnC,CAGd,OAAA,CAFII,YAEJ,CAFaX,SAAUY,CAAAA,KAAV,CAAgBC,sBAAhB,CAEb,EACaF,YAAOG,CAAAA,GAAP,CAAW,QAAS,CAACC,SAAD,CAAY,CAE3C,GAAkB,IAAlB,GAAIA,SAAJ,CACE,MAAO,GAGT,KAAIC,eAAiBD,SAAA,CAAU,CAAV,CAErB,IAAuB,GAAvB,GAAIC,cAAJ,CACE,MAyBJ,UAzBW,CAqBX,CAFIC,cAEJ,CArB8BF,SAmBVH,CAAAA,KAAN,CAAYM,mBAAZ,CAEd,EAIOD,cAAA,CAAQ,CAAR,CAAWE,CAAAA,OAAX,CAAmBC,iBAAnB,CAAsC,GAAtC,CAJP,CArB8BL,SAAnB,CAAA,SAGT,KAAIM,UAAYC,OAAQ5B,CAAAA,OAAR,CAAgBsB,cAAhB,CAEhB,IAAIK,SAAJ,CACE,MAAOA,UAAA,CAAUZ,OAAV,CAAmBM,SAAnB,CAGT,IAAIC,cAAeJ,CAAAA,KAAf,CAAqBW,6BAArB,CAAJ,CACE,KAAM,KAAIjB,UAAJ,CAAe,gEAAf;AAAkFU,cAAlF,CAAmG,GAAnG,CAAN,CAGF,MAAOD,UAtBoC,CAAhC,CAuBVS,CAAAA,IAvBUC,CAuBL,EAvBKA,CADb,CAAoB,EAfqB,CAnF3C,KAAIrB,OAASb,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIkC,QAAU/B,sBAAA,CAAuBH,OAAA,CAAQ,gEAAR,CAAvB,CAFd,CAIIoB,QAAUjB,sBAAA,CAAuBH,OAAA,CAAQ,yEAAR,CAAvB,CAJd,CAMIiB,QAAUd,sBAAA,CAAuBH,OAAA,CAAQ,4CAAR,CAAvB,CANd,CAQIsB,QAAUnB,sBAAA,CAAuBH,OAAA,CAAQ,oDAAR,CAAvB,CARd;AAUIa,QAAUV,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAVd,CAuBIyB,uBAAyB,gCAvB7B,CAwBIK,oBAAsB,cAxB1B,CAyBIE,kBAAoB,KAzBxB,CA0BIG,8BAAgC,UA8GpClC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OAhJkF;",
"sources":["node_modules/date-fns/lightFormat/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$lightFormat$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = lightFormat;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/format/lightFormatters/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../subMilliseconds/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// This RegExp consists of three parts separated by `|`:\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nvar formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name lightFormat\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. Unlike `format`,\n * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n *\n * > \u26a0\ufe0f Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   |\n * |---------------------------------|---------|-----------------------------------|\n * | AM, PM                          | a..aaa  | AM, PM                            |\n * |                                 | aaaa    | a.m., p.m.                        |\n * |                                 | aaaaa   | a, p                              |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n * |                                 | yy      | 44, 01, 00, 17                    |\n * |                                 | yyy     | 044, 001, 000, 017                |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n * |                                 | MM      | 01, 02, ..., 12                   |\n * | Day of month                    | d       | 1, 2, ..., 31                     |\n * |                                 | dd      | 01, 02, ..., 31                   |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n * |                                 | hh      | 01, 02, ..., 11, 12               |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n * |                                 | HH      | 00, 01, 02, ..., 23               |\n * | Minute                          | m       | 0, 1, ..., 59                     |\n * |                                 | mm      | 00, 01, ..., 59                   |\n * | Second                          | s       | 0, 1, ..., 59                     |\n * |                                 | ss      | 00, 01, ..., 59                   |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |\n * |                                 | SS      | 00, 01, ..., 99                   |\n * |                                 | SSS     | 000, 0001, ..., 999               |\n * |                                 | SSSS    | ...                               |\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n * //=> '2014-02-11'\n */\n\nfunction lightFormat(dirtyDate, formatStr) {\n  (0, _index6.default)(2, arguments);\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index4.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = (0, _index3.default)(originalDate);\n  var utcDate = (0, _index5.default)(originalDate, timezoneOffset);\n  var tokens = formatStr.match(formattingTokensRegExp); // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n\n  if (!tokens) return '';\n  var result = tokens.map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = _index2.default[firstCharacter];\n\n    if (formatter) {\n      return formatter(utcDate, substring);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  var matches = input.match(escapedStringRegExp);\n\n  if (!matches) {\n    return input;\n  }\n\n  return matches[1].replace(doubleQuoteRegExp, \"'\");\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","lightFormat","dirtyDate","formatStr","_index6","arguments","originalDate","_index","_index4","RangeError","timezoneOffset","_index3","utcDate","_index5","tokens","match","formattingTokensRegExp","map","substring","firstCharacter","matches","escapedStringRegExp","replace","doubleQuoteRegExp","formatter","_index2","unescapedLatinCharacterRegExp","join","result"]
}
