{
"version":3,
"file":"module$node_modules$date_fns$formatRFC3339$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/date-fns/formatRFC3339/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$formatRFC3339$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatRFC3339;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name formatRFC3339\n * @category Common Helpers\n * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).\n *\n * @description\n * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {0|1|2|3} [options.fractionDigits=0] - number of digits after the decimal point after seconds\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.fractionDigits` must be between 0 and 3\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 2 digits of second fraction:\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 2 })\n * //=> '2019-09-18T19:00:52.23Z'\n *\n * @example\n * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction\n * const result = formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), { fractionDigits: 3 })\n * //=> '2019-09-18T19:00:52.234Z'\n */\nfunction formatRFC3339(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var _ref = dirtyOptions || {},\n      _ref$fractionDigits = _ref.fractionDigits,\n      fractionDigits = _ref$fractionDigits === void 0 ? 0 : _ref$fractionDigits; // Test if fractionDigits is between 0 and 3 _and_ is not NaN\n\n\n  if (!(fractionDigits >= 0 && fractionDigits <= 3)) {\n    throw new RangeError('fractionDigits must be between 0 and 3 inclusively');\n  }\n\n  var day = (0, _index3.default)(originalDate.getDate(), 2);\n  var month = (0, _index3.default)(originalDate.getMonth() + 1, 2);\n  var year = originalDate.getFullYear();\n  var hour = (0, _index3.default)(originalDate.getHours(), 2);\n  var minute = (0, _index3.default)(originalDate.getMinutes(), 2);\n  var second = (0, _index3.default)(originalDate.getSeconds(), 2);\n  var fractionalSecond = '';\n\n  if (fractionDigits > 0) {\n    var milliseconds = originalDate.getMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, fractionDigits - 3));\n    fractionalSecond = '.' + (0, _index3.default)(fractionalSeconds, fractionDigits);\n  }\n\n  var offset = '';\n  var tzOffset = originalDate.getTimezoneOffset();\n\n  if (tzOffset !== 0) {\n    var absoluteOffset = Math.abs(tzOffset);\n    var hourOffset = (0, _index3.default)((0, _index4.default)(absoluteOffset / 60), 2);\n    var minuteOffset = (0, _index3.default)(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n    var sign = tzOffset < 0 ? '+' : '-';\n    offset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n  } else {\n    offset = 'Z';\n  }\n\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \"T\").concat(hour, \":\").concat(minute, \":\").concat(second).concat(fractionalSecond).concat(offset);\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","formatRFC3339","dirtyDate","dirtyOptions","arguments","length","TypeError","concat","originalDate","_index","_index2","RangeError","_ref$fractionDigits","fractionDigits","day","_index3","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","second","getSeconds","fractionalSecond","milliseconds","getMilliseconds","Math","floor","fractionalSeconds","pow","tzOffset","getTimezoneOffset","absoluteOffset","abs","hourOffset","_index4","minuteOffset","offset","sign"]
}
