{
"version":3,
"file":"module$node_modules$date_fns$parseISO$index.js",
"lineCount":15,
"mappings":"AAAAA,cAAA,CAAA,2CAAA,CAAgE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYxGC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAsLrCG,QAASA,UAAS,CAACC,UAAD,CAAaC,IAAb,CAAmB,CAEnC,GAAa,IAAb,GAAIA,IAAJ,CAAmB,MAAO,KAC1B,KAAIC,SAAWF,UAAWG,CAAAA,KAAX,CAAiBC,SAAjB,CAEf,IAAI,CAACF,QAAL,CAAe,MAAO,KACtB,KAAIG,WAAa,CAAC,CAACH,QAAA,CAAS,CAAT,CAAnB,CACII,UAAYC,aAAA,CAAcL,QAAA,CAAS,CAAT,CAAd,CADhB,CAEIM,MAAQD,aAAA,CAAcL,QAAA,CAAS,CAAT,CAAd,CAARM,CAAqC,CAFzC,CAGIC,IAAMF,aAAA,CAAcL,QAAA,CAAS,CAAT,CAAd,CACNQ,WAAAA,CAAOH,aAAA,CAAcL,QAAA,CAAS,CAAT,CAAd,CACPS,SAAAA,CAAYJ,aAAA,CAAcL,QAAA,CAAS,CAAT,CAAd,CAAZS;AAAyC,CAE7C,IAAIN,UAAJ,CAAgB,CACd,GAAI,EAiFS,CAjFT,EAAwBK,UAAxB,EAiFsB,EAjFtB,EAAwBA,UAAxB,EAiFmC,CAjFnC,EAA8BC,QAA9B,EAiF+C,CAjF/C,EAA8BA,QAA9B,CAAJ,CACE,MAAO,KAAIC,IAAJ,CAASC,GAAT,CAuDPC,UAAAA,CAAO,IAAIF,IAAJ,CAAS,CAAT,CACXE,UAAKC,CAAAA,cAAL,CArD0Bd,IAqD1B,CAAiC,CAAjC,CAAoC,CAApC,CACIe,KAAAA,CAAqBF,SAAKG,CAAAA,SAAL,EAArBD,EAAyC,CACzCE,KAAAA,CAAoB,CAApBA,EAvD4BR,UAuD5BQ,CAAe,CAAfA,EAvDkCP,QAuDlCO,CAA8B,CAA9BA,CAAkCF,IACtCF,UAAKK,CAAAA,UAAL,CAAgBL,SAAKM,CAAAA,UAAL,EAAhB,CAAoCF,IAApC,CAxDE,OAyDKJ,UA9DS,CAOVA,UAAAA,CAAO,IAAIF,IAAJ,CAAS,CAAT,CAEX,IAAI,EAiEU,CAjEV,EAAoBJ,KAApB,EAiEwB,EAjExB,EAAoBA,KAApB,EAiEsC,CAjEtC,EAA2BC,GAA3B,EAA2BA,GAA3B,GAiEoDY,YAAA,CAjEhCb,KAiEgC,CAjEpD,GA6DgB,CAI4D,GAjE9DP,IAiE8D,CAJpE,GAIoE,EAJ1C,CAI0C,GAjE9DA,IAiE8D,CAJhD,CAIgD,EAjE9DA,IAiE8D,CAJ9B,GAI8B,CAAwB,EAAxB,CAA6B,EAjEzG,IAqEc,CArEd,EAAgEK,SAAhE,EAAgEA,SAAhE,GA6DgB,CAQiB,GArEyBL,IAqEzB,CARzB,GAQyB,EARC,CAQD,GArEyBA,IAqEzB,CARL,CAQK,EArEyBA,IAqEzB,CARa,GAQb,CAAwB,GAAxB,CAA8B,GArE/D,EAAJ,CACE,MAAO,KAAIW,IAAJ,CAASC,GAAT,CAGTC;UAAKC,CAAAA,cAAL,CAAoBd,IAApB,CAA0BO,KAA1B,CAAiCc,IAAKC,CAAAA,GAAL,CAASjB,SAAT,CAAoBG,GAApB,CAAjC,CACA,OAAOK,WA3B0B,CA+BrCP,QAASA,cAAa,CAACiB,KAAD,CAAQ,CAC5B,MAAOA,MAAA,CAAQC,QAAA,CAASD,KAAT,CAAR,CAA0B,CADL,CAmB9BE,QAASA,cAAa,CAACF,KAAD,CAAQ,CAC5B,MAAOA,MAAP,EAAgBG,UAAA,CAAWH,KAAMI,CAAAA,OAAN,CAAc,GAAd,CAAmB,GAAnB,CAAX,CAAhB,EAAuD,CAD3B,CAjP9BC,MAAOC,CAAAA,cAAP,CAAsBpC,OAAtB,CAA+B,YAA/B,CAA6C,CAC3C8B,MAAO,CAAA,CADoC,CAA7C,CAGA9B,QAAQI,CAAAA,OAAR,CA6EAiC,QAAiB,CAACC,QAAD,CAAWC,YAAX,CAAyB,CACxC,GAAIC,OAAQpC,CAAAA,OAAZ,EAAqB,CAArB,CAAwBqC,SAAxB,CACIC,KAAAA,6CAAUH,YAAVG,EAA0B,EAC1BC,6CAAAA,CAA+C,IAA5B,EAAAD,4CAAQC,CAAAA,gBAAR;AAAmCC,yBAAnC,CAA+D,GAAIC,MAAOzC,CAAAA,OAAX,EAAoBsC,4CAAQC,CAAAA,gBAA5B,CAEtF,IAAyB,CAAzB,GAAIA,4CAAJ,EAAmD,CAAnD,GAA8BA,4CAA9B,EAA6E,CAA7E,GAAwDA,4CAAxD,CACE,KAAM,KAAIG,UAAJ,CAAe,oCAAf,CAAN,CAGF,GAA0B,QAA1B,GAAM,MAAOR,SAAb,EAAmF,iBAAnF,GAAsCH,MAAOY,CAAAA,SAAUC,CAAAA,QAASC,CAAAA,IAA1B,CAA+BX,QAA/B,CAAtC,CACE,MAAO,KAAIpB,IAAJ,CAASC,GAAT,CAGyBmB,KAAAA,WAAAA,QAAAA,CAgD9BY,MAAQ5C,UAAW6C,CAAAA,KAAX,CAAiBC,QAASC,CAAAA,iBAA1B,CAIZ;GAAI,EAAe,CAAf,CAAAH,KAAMI,CAAAA,MAAN,CAAJ,CAAA,CAIA,GAAI,GAAIC,CAAAA,IAAJ,CAASL,KAAA,CAAM,CAAN,CAAT,CAAJ,CAAwB,CACtB,IAAY9B,mCAAO,IACnBoC,MAAA,CAAaN,KAAA,CAAM,CAAN,CAFS,CAAxB,IAIc9B,mCAGZ,CAHmB8B,KAAA,CAAM,CAAN,CAGnB,CAFAM,KAEA,CAFaN,KAAA,CAAM,CAAN,CAEb,CAAIE,QAASK,CAAAA,iBAAkBF,CAAAA,IAA3B,CAA4CnC,kCAA5C,CAAJ,GACcA,kCACZ,CADmBd,UAAW6C,CAAAA,KAAX,CAAiBC,QAASK,CAAAA,iBAA1B,CAAA,CAA6C,CAA7C,CACnB,CAAAD,KAAA,CAAalD,UAAWoD,CAAAA,MAAX,CAA8BtC,kCAAKkC,CAAAA,MAAnC,CAA2ChD,UAAWgD,CAAAA,MAAtD,CAFf,CAMF,IAAIE,KAAJ,CAGE,GAFIG,UAEJ,CAFYP,QAASQ,CAAAA,QAASC,CAAAA,IAAlB,CAAuBL,KAAvB,CAEZ,CAAW,CACT,IAAYM,mCAAON,KAAWtB,CAAAA,OAAX,CAAmByB,UAAA,CAAM,CAAN,CAAnB;AAA6B,EAA7B,CACnB,KAAYC,uCAAWD,UAAA,CAAM,CAAN,CAFd,CAAX,IAIcG,mCAAZ,CAAmBN,KAxBvB,CAjDA,GAAgBpC,kCAAhB,CAAsB,CAoFtB,GAFIZ,4CAEJ,CAFeF,kCAAWG,CAAAA,KAAX,CADHsD,IAAIC,MAAJD,CAAW,sBAAXA,EAAqC,CAArCA,CAhFwCpB,4CAgFxCoB,EAA6D,qBAA7DA,EAAsF,CAAtFA,CAhFwCpB,4CAgFxCoB,EAA8G,MAA9GA,CACG,CAEf,CAAA,CAGIxD,IAAAA,mCAAOC,4CAAA,CAAS,CAAT,CAAPD,EAAsBwB,QAAA,CAASvB,4CAAA,CAAS,CAAT,CAAT,CACtByD;UAAAA,CAAUzD,4CAAA,CAAS,CAAT,CAAVyD,EAAyBlC,QAAA,CAASvB,4CAAA,CAAS,CAAT,CAAT,CAC7B,mCAAA,CACmB,IAAX,EAAAyD,UAAA,CAAkB1D,kCAAlB,CAAmC,GAAnC,CAAyB0D,UADjC,6CAAA,CAEkB3D,kCAAW4D,CAAAA,KAAX,CAA8CZ,CAA5B9C,4CAAA,CAAS,CAAT,CAA4B8C,EAAb9C,4CAAA,CAAS,CAAT,CAAa8C,EAAAA,MAA9C,CAPlB,CAAA,IAAe,mCAAA,CACP,IADO,CAAA,4CAAA;AAAA,IAAA,EAlFblC,mCAAA,CAAOf,SAAA,CAA0B8D,4CAA1B,CAA0D5D,kCAA1D,CAFa,CAKtB,GAAI6D,KAAA,CAAMhD,kCAAN,CAAJ,EAAmB,CAACA,kCAApB,CACE,MAAO,KAAIF,IAAJ,CAASC,GAAT,CAGLkD,6CAAAA,CAAYjD,kCAAKkD,CAAAA,OAAL,EACZR,mCAAAA,CAAO,CAGX,IAAgBA,kCAAhB,GAuHA,CADItD,kCACJ,CAtH+BsD,kCAqHLrD,CAAAA,KAAX,CAAiB8D,SAAjB,CACf,GAEIC,kCAQJ;AARYxC,aAAA,CAAcxB,kCAAA,CAAS,CAAT,CAAd,CAQZ,CAPIiE,kCAOJ,CAPczC,aAAA,CAAcxB,kCAAA,CAAS,CAAT,CAAd,CAOd,CANIkE,kCAMJ,CANc1C,aAAA,CAAcxB,kCAAA,CAAS,CAAT,CAAd,CAMd,CAAA,kCAAA,CAJA,CAwDc,EAAd,GAxDkBgE,kCAwDlB,CACqB,CADrB,GAxDyBC,kCAwDzB,EACsC,CADtC,GAxDkCC,kCAwDlC,CAIkB,CAJlB,EAxDkCA,kCAwDlC,EAIiC,EAJjC,CAxDkCA,kCAwDlC,EAIkD,CAJlD,EAxDyBD,kCAwDzB;AAIiE,EAJjE,CAxDyBA,kCAwDzB,EAIgF,CAJhF,EAxDkBD,kCAwDlB,EAI6F,EAJ7F,CAxDkBA,kCAAlB,EAIOA,kCAJP,CAIeG,oBAJf,CAIsCF,kCAJtC,CAIgDG,sBAJhD,CAImF,GAJnF,CAIyEF,kCAJzE,CACSvD,GAPT,EAAe,kCAAf,CAAsB,IApHhB,CAAAiD,KAAA,CAAMN,kCAAN,CAAA,EAAwB,IAAxB,GAAeA,kCAHrB,EAII,MAAO,KAAI5C,IAAJ,CAASC,GAAT,CAIX,IAAgByC,sCAAhB,CAGE,IA8HqB,GAAvB,GAAIiB,sCAAJ;AAA4B,sCAA5B,CAAmC,CAAnC,CAEA,CADIrE,kCACJ,CADeqE,sCAAepE,CAAAA,KAAf,CAAqBqE,aAArB,CACf,GACIC,sCAIJ,CAJ2B,GAAhB,GAAAvE,kCAAA,CAAS,CAAT,CAAA,CAAsB,CAAC,CAAvB,CAA2B,CAItC,CAHIgE,kCAGJ,CAHYzC,QAAA,CAASvB,kCAAA,CAAS,CAAT,CAAT,CAGZ,CAFIiE,kCAEJ,CAFcjE,kCAAA,CAAS,CAAT,CAEd,EAF6BuB,QAAA,CAASvB,kCAAA,CAAS,CAAT,CAAT,CAE7B,EAFsD,CAEtD,CAAA,sCAAA,CA6CkB,CA7ClB,EAA6BiE,kCAA7B;AA6CkC,EA7ClC,EAA6BA,kCAA7B,CAIOM,sCAJP,EAIeP,kCAJf,CAIuBG,oBAJvB,CAI8CF,kCAJ9C,CAIwDG,sBAJxD,EACSzD,GANT,EAAe,sCAAf,CAAsB,CAhIhB,CAAAiD,KAAA,CAAMY,sCAAN,CAAJ,CACE,MAAO,KAAI9D,IAAJ,CAASC,GAAT,CADT,CAHF,IAgBE,OATI8D,uCASGC,CATS,IAAIhE,IAAJ,CAASmD,4CAAT,CAAqBP,kCAArB,CASToB,CAHHA,kCAGGA,CAHM,IAAIhE,IAAJ,CAAS,CAAT,CAGNgE,CAFPA,kCAAOC,CAAAA,WAAP,CAAmBF,sCAAUG,CAAAA,cAAV,EAAnB;AAA+CH,sCAAUI,CAAAA,WAAV,EAA/C,CAAwEJ,sCAAUvD,CAAAA,UAAV,EAAxE,CAEOwD,CADPA,kCAAOI,CAAAA,QAAP,CAAgBL,sCAAUM,CAAAA,WAAV,EAAhB,CAAyCN,sCAAUO,CAAAA,aAAV,EAAzC,CAAoEP,sCAAUQ,CAAAA,aAAV,EAApE,CAA+FR,sCAAUS,CAAAA,kBAAV,EAA/F,CACOR,CAAAA,kCAGT,OAAO,KAAIhE,IAAJ,CAASmD,4CAAT,CAAqBP,kCAArB;AAA4BkB,sCAA5B,CAxDiC,CA3E1C,KAAInC,OAAS5C,sBAAA,CAAuBH,OAAA,CAAQ,mDAAR,CAAvB,CAAb,CAEI0C,QAAUvC,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAFd,CAMI6E,qBAAuB,IAN3B,CAOIC,uBAAyB,GAP7B,CAQIhC,0BAA4B,CARhC,CASIQ,SAAW,CACbC,kBAAmB,MADN,CAEbI,kBAAmB,OAFN,CAGbG,SAAU,YAHG,CATf,CAcIlD,UAAY,+DAdhB,CAeI6D,UAAY,2EAfhB;AAgBIO,cAAgB,+BAhBpB,CA0QInD,aAAe,CAAC,EAAD,CAAK,IAAL,CAAW,EAAX,CAAe,EAAf,CAAmB,EAAnB,CAAuB,EAAvB,CAA2B,EAA3B,CAA+B,EAA/B,CAAmC,EAAnC,CAAuC,EAAvC,CAA2C,EAA3C,CAA+C,EAA/C,CA8BnB5B,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OAhT+E;",
"sources":["node_modules/date-fns/parseISO/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$parseISO$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseISO;\n\nvar _index = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nfunction parseISO(argument, dirtyOptions) {\n  (0, _index2.default)(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : (0, _index.default)(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","parseDate","dateString","year","captures","match","dateRegex","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","Date","NaN","date","setUTCFullYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","daysInMonths","Math","max","value","parseInt","parseTimeUnit","parseFloat","replace","Object","defineProperty","parseISO","argument","dirtyOptions","_index2","arguments","options","additionalDigits","DEFAULT_ADDITIONAL_DIGITS","_index","RangeError","prototype","toString","call","array","split","patterns","dateTimeDelimiter","length","test","timeString","timeZoneDelimiter","substr","token","timezone","exec","time","regex","RegExp","century","slice","restDateString","isNaN","timestamp","getTime","timeRegex","hours","minutes","seconds","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","timezoneString","timezoneRegex","sign","offset","dirtyDate","result","setFullYear","getUTCFullYear","getUTCMonth","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds"]
}
