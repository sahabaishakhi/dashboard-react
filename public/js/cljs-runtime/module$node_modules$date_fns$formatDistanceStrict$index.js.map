{
"version":3,
"file":"module$node_modules$date_fns$formatDistanceStrict$index.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/date-fns/formatDistanceStrict/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$formatDistanceStrict$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatDistanceStrict;\n\nvar _index = _interopRequireDefault(require(\"../_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../compareAsc/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../_lib/cloneObject/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../locale/en-US/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nfunction formatDistanceStrict(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0, _index6.default)(2, arguments);\n  var locale = options.locale || _index5.default;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = (0, _index2.default)(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = (0, _index4.default)(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = (0, _index3.default)(dirtyBaseDate);\n    dateRight = (0, _index3.default)(dirtyDate);\n  } else {\n    dateLeft = (0, _index3.default)(dirtyDate);\n    dateRight = (0, _index3.default)(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = (0, _index.default)(dateRight) - (0, _index.default)(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","formatDistanceStrict","dirtyDate","dirtyBaseDate","options","arguments","length","undefined","_index6","locale","_index5","formatDistance","RangeError","comparison","_index2","isNaN","localizeOptions","_index4","addSuffix","dateLeft","_index3","dateRight","roundingMethod","String","roundingMethodFn","Math","floor","ceil","round","milliseconds","getTime","minutes","MILLISECONDS_IN_MINUTE","timezoneOffset","_index","dstNormalizedMinutes","unit","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","seconds","roundedMinutes","hours","days","months","years"]
}
