{
"version":3,
"file":"module$node_modules$date_fns$parseJSON$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYzGC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CATrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CA0CAI,QAAkB,CAACC,QAAD,CAAW,CAC3B,GAAIC,OAAQN,CAAAA,OAAZ,EAAqB,CAArB,CAAwBO,SAAxB,CAEA,IAAwB,QAAxB,GAAI,MAAOF,SAAX,CAAkC,CAChC,IAAIG,MAAQH,QAASI,CAAAA,KAAT,CAAe,+FAAf,CAEZ,OAAID,MAAJ,CAES,IAAIE,IAAJ,CAASA,IAAKC,CAAAA,GAAL,CAAS,CAACH,KAAA,CAAM,CAAN,CAAV,CAAoB,CAACA,KAAA,CAAM,CAAN,CAArB;AAAgC,CAAhC,CAAmC,CAACA,KAAA,CAAM,CAAN,CAApC,CAA8C,CAACA,KAAA,CAAM,CAAN,CAA/C,EAA2D,CAACA,KAAA,CAAM,CAAN,CAA5D,EAAwE,CAAxE,GAA0F,GAAZ,EAAAA,KAAA,CAAM,CAAN,CAAA,CAAkB,CAAC,CAAnB,CAAuB,CAArG,EAAyG,CAACA,KAAA,CAAM,CAAN,CAA1G,EAAsH,CAACA,KAAA,CAAM,EAAN,CAAvH,EAAoI,CAApI,GAAsJ,GAAZ,EAAAA,KAAA,CAAM,CAAN,CAAA,CAAkB,CAAC,CAAnB,CAAuB,CAAjK,EAAqK,CAACA,KAAA,CAAM,CAAN,CAAtK,CAAgL,CAA4BI,EAAzBJ,KAAA,CAAM,CAAN,CAAyBI,EAAb,GAAaA,EAAN,IAAMA,EAAAA,SAA3B,CAAqC,CAArC,CAAwC,CAAxC,CAAjL,CAAT,CAFT,CAKO,IAAIF,IAAJ,CAASG,GAAT,CARyB,CAWlC,MAAO,GAAIC,MAAOd,CAAAA,OAAX,EAAoBK,QAApB,CAdoB,CAxC7B,KAAIS,OAASjB,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAuDdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OAjEgF;",
"sources":["node_modules/date-fns/parseJSON/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$parseJSON$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseJSON;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name parseJSON\n * @category Common Helpers\n * @summary Parse a JSON date string\n *\n * @description\n * Converts a complete ISO date string in UTC time, the typical format for transmitting\n * a date in JSON, to a JavaScript `Date` instance.\n *\n * This is a minimal implementation for converting dates retrieved from a JSON API to\n * a `Date` instance which can be used with other functions in the `date-fns` library.\n * The following formats are supported:\n *\n * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n * - `2000-03-15T05:20:10Z`: Without milliseconds\n * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n *\n * For convenience and ease of use these other input types are also supported\n * via [toDate]{@link https://date-fns.org/docs/toDate}:\n *\n * - A `Date` instance will be cloned\n * - A `number` will be treated as a timestamp\n *\n * Any other input type or invalid date strings will return an `Invalid Date`.\n *\n * @param {String|Number|Date} argument A fully formed ISO8601 date string to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n */\nfunction parseJSON(argument) {\n  (0, _index2.default)(1, arguments);\n\n  if (typeof argument === 'string') {\n    var parts = argument.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/);\n\n    if (parts) {\n      // Group 8 matches the sign\n      return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == '-' ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == '-' ? -1 : 1), +parts[6], +((parts[7] || '0') + '00').substring(0, 3)));\n    }\n\n    return new Date(NaN);\n  }\n\n  return (0, _index.default)(argument);\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","parseJSON","argument","_index2","arguments","parts","match","Date","UTC","substring","NaN","_index"]
}
