{
"version":3,
"file":"module$node_modules$date_fns$previousDay$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc3GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAXrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAiCAI,QAAoB,CAACC,IAAD,CAAOC,GAAP,CAAY,CAC9B,GAAIC,MAAOP,CAAAA,OAAX,EAAoB,CAApB,CAAuBQ,SAAvB,CACA,KAAIC,MAAQ,GAAIC,OAAQV,CAAAA,OAAZ,EAAqBK,IAArB,CAARI,CAAqCH,GAC5B,EAAb,EAAIG,KAAJ,GAAgBA,KAAhB,EAAyB,CAAzB,CACA,OAAO,GAAIE,OAAQX,CAAAA,OAAZ,EAAqBK,IAArB,CAA2BI,KAA3B,CAJuB,CA/BhC,KAAIF,OAASV,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAAb;AAEIgB,QAAUb,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAFd,CAIIiB,QAAUd,sBAAA,CAAuBH,OAAA,CAAQ,4CAAR,CAAvB,CAkCdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA9CkF;",
"sources":["node_modules/date-fns/previousDay/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$previousDay$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = previousDay;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../getDay/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../subDays/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name previousDay\n * @category Weekday Helpers\n * @summary When is the previous day of the week?\n *\n * @description\n * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @param {Date | number} date - the date to check\n * @param {number} day - day of the week\n * @returns {Date} - the date is the previous day of week\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // When is the previous Monday before Mar, 20, 2020?\n * const result = previousDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 16 2020 00:00:00\n *\n * @example\n * // When is the previous Tuesday before Mar, 21, 2020?\n * const result = previousDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 17 2020 00:00:00\n */\nfunction previousDay(date, day) {\n  (0, _index.default)(2, arguments);\n  var delta = (0, _index2.default)(date) - day;\n  if (delta <= 0) delta += 7;\n  return (0, _index3.default)(date, delta);\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","previousDay","date","day","_index","arguments","delta","_index2","_index3"]
}
