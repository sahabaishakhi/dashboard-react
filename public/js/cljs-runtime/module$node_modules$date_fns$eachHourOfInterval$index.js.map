{
"version":3,
"file":"module$node_modules$date_fns$eachHourOfInterval$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAclHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAXrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAwCAI,QAA2B,CAACC,aAAD,CAAgBC,OAAhB,CAAyB,CAClD,GAAIC,OAAQP,CAAAA,OAAZ,EAAqB,CAArB,CAAwBQ,SAAxB,CACA,KAAIC,SAAWJ,aAAXI,EAA4B,EAAhC,CACIC,UAAY,GAAIC,OAAQX,CAAAA,OAAZ,EAAqBS,QAASG,CAAAA,KAA9B,CACZC,SAAAA,CAAU,GAAIF,OAAQX,CAAAA,OAAZ,EAAqBS,QAASK,CAAAA,GAA9B,CACd,KAAIC,UAAYL,SAAUM,CAAAA,OAAV,EACZC,SAAAA,CAAUJ,QAAQG,CAAAA,OAAR,EAEd;GAAI,EAAED,SAAF,EAAeE,QAAf,CAAJ,CACE,KAAM,KAAIC,UAAJ,CAAe,kBAAf,CAAN,CAGEC,SAAAA,CAAQ,EAEZC,UAAYC,CAAAA,UAAZ,CAAuB,CAAvB,CAA0B,CAA1B,CAA6B,CAA7B,CACA,KAAIC,KAAOhB,OAAA,EAAW,MAAX,EAAqBA,QAArB,CAA+BiB,MAAA,CAAOjB,OAAQgB,CAAAA,IAAf,CAA/B,CAAsD,CACjE,IAAW,CAAX,CAAIA,IAAJ,EAAgBE,KAAA,CAAMF,IAAN,CAAhB,CAA6B,KAAM,KAAIJ,UAAJ,CAAe,gDAAf,CAAN,CAE7B,IAAA,CAAOE,SAAYJ,CAAAA,OAAZ,EAAP,EAAgCC,QAAhC,CAAA,CACEE,SAAMM,CAAAA,IAAN,CAAW,GAAId,OAAQX,CAAAA,OAAZ,EAAqBoB,SAArB,CAAX,CACA,CAAAA,SAAA,CAAc,GAAIM,MAAO1B,CAAAA,OAAX,EAAoBoB,SAApB,CAAiCE,IAAjC,CAGhB,OAAOH,UAvB2C,CAtCpD,KAAIO,OAAS7B,sBAAA,CAAuBH,OAAA,CAAQ,6CAAR,CAAvB,CAAb,CAEIiB;AAAUd,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAFd,CAIIa,QAAUV,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CA4DdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OAxEyF;",
"sources":["node_modules/date-fns/eachHourOfInterval/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$eachHourOfInterval$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachHourOfInterval;\n\nvar _index = _interopRequireDefault(require(\"../addHours/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name eachHourOfInterval\n * @category Interval Helpers\n * @summary Return the array of hours within the specified time interval.\n *\n * @description\n * Return the array of hours within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of hours from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00\n * var result = eachHourOfInterval({\n *   start: new Date(2014, 9, 6, 12),\n *   end: new Date(2014, 9, 6, 15)\n * })\n * //=> [\n * //   Mon Oct 06 2014 12:00:00,\n * //   Mon Oct 06 2014 13:00:00,\n * //   Mon Oct 06 2014 14:00:00,\n * //   Mon Oct 06 2014 15:00:00\n * // ]\n */\nfunction eachHourOfInterval(dirtyInterval, options) {\n  (0, _index3.default)(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = (0, _index2.default)(interval.start);\n  var endDate = (0, _index2.default)(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setMinutes(0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push((0, _index2.default)(currentDate));\n    currentDate = (0, _index.default)(currentDate, step);\n  }\n\n  return dates;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","eachHourOfInterval","dirtyInterval","options","_index3","arguments","interval","startDate","_index2","start","endDate","end","startTime","getTime","endTime","RangeError","dates","currentDate","setMinutes","step","Number","isNaN","push","_index"]
}
