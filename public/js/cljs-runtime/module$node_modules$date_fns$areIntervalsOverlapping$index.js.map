{
"version":3,
"file":"module$node_modules$date_fns$areIntervalsOverlapping$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYvHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CATrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAiGAI,QAAgC,CAACC,iBAAD,CAAoBC,kBAApB,CAAwC,CACtE,IAAIC,QAA6B,CAAnB,CAAAC,SAAUC,CAAAA,MAAV,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,CAChFG,UAAW,CAAA,CADqE,CAGlF,IAAIC,OAAQZ,CAAAA,OAAZ,EAAqB,CAArB,CAAwBQ,SAAxB,CACA,KAAIK,aAAeR,iBAAfQ,EAAoC,EAAxC,CACIC,cAAgBR,kBAAhBQ;AAAsC,EAD1C,CAEIC,cAAgB,GAAIC,MAAOhB,CAAAA,OAAX,EAAoBa,YAAaI,CAAAA,KAAjC,CAAwCC,CAAAA,OAAxC,EAChBC,aAAAA,CAAc,GAAIH,MAAOhB,CAAAA,OAAX,EAAoBa,YAAaO,CAAAA,GAAjC,CAAsCF,CAAAA,OAAtC,EAClB,KAAIG,eAAiB,GAAIL,MAAOhB,CAAAA,OAAX,EAAoBc,aAAcG,CAAAA,KAAlC,CAAyCC,CAAAA,OAAzC,EACjBI,cAAAA,CAAe,GAAIN,MAAOhB,CAAAA,OAAX,EAAoBc,aAAcM,CAAAA,GAAlC,CAAuCF,CAAAA,OAAvC,EAEnB,IAAI,EAAEH,aAAF,EAAmBI,YAAnB,EAAkCE,cAAlC,EAAoDC,aAApD,CAAJ,CACE,KAAM,KAAIC,UAAJ,CAAe,kBAAf,CAAN,CAGF,MAAIhB,QAAQI,CAAAA,SAAZ,CACSI,aADT,EAC0BO,aAD1B,EAC0CD,cAD1C,EAC4DF,YAD5D,CAIOJ,aAJP,CAIuBO,aAJvB,EAIuCD,cAJvC,CAIwDF,YApBc,CA/FxE;IAAIH,OAASnB,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIkB,QAAUf,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAoHdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA9H8F;",
"sources":["node_modules/date-fns/areIntervalsOverlapping/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$areIntervalsOverlapping$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = areIntervalsOverlapping;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\nfunction areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    inclusive: false\n  };\n  (0, _index2.default)(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = (0, _index.default)(intervalLeft.start).getTime();\n  var leftEndTime = (0, _index.default)(intervalLeft.end).getTime();\n  var rightStartTime = (0, _index.default)(intervalRight.start).getTime();\n  var rightEndTime = (0, _index.default)(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","options","arguments","length","undefined","inclusive","_index2","intervalLeft","intervalRight","leftStartTime","_index","start","getTime","leftEndTime","end","rightStartTime","rightEndTime","RangeError"]
}
