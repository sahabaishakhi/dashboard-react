{
"version":3,
"file":"module$node_modules$date_fns_tz$zonedTimeToUtc$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,oDAAA,CAAyE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcjHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAXrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAkCAI,QAAuB,CAACC,IAAD,CAAOC,QAAP,CAAiBC,OAAjB,CAA0B,CAC3CF,IAAJ,WAAoBG,KAApB,GACEH,IADF,CACS,GAAII,OAAQT,CAAAA,OAAZ,EAAqBK,IAArB,CAA2B,2BAA3B,CADT,CAIIK,QAAAA,CAAkB,GAAIC,YAAaX,CAAAA,OAAjB,EAA0BO,OAA1B,CACtBG,QAAgBJ,CAAAA,QAAhB,CAA2BA,QAC3B,OAAO,GAAIM,OAAQZ,CAAAA,OAAZ,EAAqBK,IAArB,CAA2BK,OAA3B,CAPwC,CAhCjD,KAAIC;AAAed,sBAAA,CAAuBH,OAAA,CAAQ,qDAAR,CAAvB,CAAnB,CAEIe,QAAUZ,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAFd,CAIIkB,QAAUf,sBAAA,CAAuBH,OAAA,CAAQ,8CAAR,CAAvB,CAsCdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OAlDwF;",
"sources":["node_modules/date-fns-tz/zonedTimeToUtc/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns_tz$zonedTimeToUtc$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = zonedTimeToUtc;\n\nvar _cloneObject = _interopRequireDefault(require(\"date-fns/_lib/cloneObject\"));\n\nvar _format = _interopRequireDefault(require(\"date-fns/format\"));\n\nvar _toDate = _interopRequireDefault(require(\"../toDate\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name zonedTimeToUtc\n * @category Time Zone Helpers\n * @summary Get the UTC date/time from a date representing local time in a given time zone\n *\n * @description\n * Returns a date instance with the UTC time of the provided date of which the values\n * represented the local time in the time zone specified. In other words, if the input\n * date represented local time in time time zone, the timestamp of the output date will\n * give the equivalent UTC of that local time regardless of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with values representing the local time\n * @param {String} timeZone - the time zone of this local time, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am in Los Angeles is 5pm UTC\n * const result = zonedTimeToUtc(new Date(2014, 5, 25, 10, 0, 0), 'America/Los_Angeles')\n * //=> 2014-06-25T17:00:00.000Z\n */\nfunction zonedTimeToUtc(date, timeZone, options) {\n  if (date instanceof Date) {\n    date = (0, _format.default)(date, \"yyyy-MM-dd'T'HH:mm:ss.SSS\");\n  }\n\n  var extendedOptions = (0, _cloneObject.default)(options);\n  extendedOptions.timeZone = timeZone;\n  return (0, _toDate.default)(date, extendedOptions);\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","zonedTimeToUtc","date","timeZone","options","Date","_format","extendedOptions","_cloneObject","_toDate"]
}
