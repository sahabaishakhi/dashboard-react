{
"version":3,
"file":"module$node_modules$date_fns_tz$_lib$tzIntlTimeZoneName$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG1HC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAOAC,QAA2B,CAACC,MAAD,CAASC,IAAT,CAAeC,OAAf,CAAwB,CACEC,IAAAA,OAARD,OAAQC,CAAAA,MAkBnD,IAAIA,MAAJ,EAAc,CAACA,MAAOC,CAAAA,IAAtB,CACE,KAAUC,MAAJ,CAAU,4HAAV,CAAN,CAGF,MAAA,CAAO,IAAIC,IAAKC,CAAAA,cAAT,CAAwBJ,MAAA,CAAS,CAACA,MAAOC,CAAAA,IAAR,CAAc,OAAd,CAAT,CAAkCI,IAAAA,EAA1D,CAAqE,CAC1EC,SAvBuBP,OAAQO,CAAAA,QAsB2C,CAE1EC,aAxBeV,MAsB2D,CAArE,CArBAW;MAAIC,CAAAA,aAAJ,EAIHC,IACJ,CAL2BF,MAIPC,CAAAA,aAAJ,CAJWX,IAIX,CAChB,CAAA,IAAA,CAAOY,IAAA,CAAUA,IAAUb,CAAAA,MAApB,CAA6B,CAA7B,CAAgCH,CAAAA,KALhC,GASHgB,IAEJ,CAXsDF,MASlCG,CAAAA,MAAJ,CATsCb,IAStC,CAAiBc,CAAAA,OAAjB,CAAyB,SAAzB,CAAoC,EAApC,CAEhB,CAAA,IAAA,CAAO,CADHC,IACG,CADW,YAAaC,CAAAA,IAAb,CAAkBJ,IAAlB,CACX,EAAcG,IAAA,CAAY,CAAZ,CAAeE,CAAAA,MAAf,CAAsB,CAAtB,CAAd,CAAyC,EAXzC,CAAP,OAAO,KAF0C,CA6BnDzB,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA1CiG;",
"sources":["node_modules/date-fns-tz/_lib/tzIntlTimeZoneName/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns_tz$_lib$tzIntlTimeZoneName$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzIntlTimeZoneName;\n\n/**\n * Returns the formatted time zone name of the provided `timeZone` or the current\n * system time zone if omitted, accounting for DST according to the UTC value of\n * the date.\n */\nfunction tzIntlTimeZoneName(length, date, options) {\n  var dtf = getDTF(length, options.timeZone, options.locale);\n  return dtf.formatToParts ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date);\n}\n\nfunction partsTimeZone(dtf, date) {\n  var formatted = dtf.formatToParts(date);\n  return formatted[formatted.length - 1].value;\n}\n\nfunction hackyTimeZone(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '');\n  var tzNameMatch = / [\\w-+ ]+$/.exec(formatted);\n  return tzNameMatch ? tzNameMatch[0].substr(1) : '';\n} // If a locale has been provided `en-US` is used as a fallback in case it is an\n// invalid locale, otherwise the locale is left undefined to use the system locale.\n\n\nfunction getDTF(length, timeZone, locale) {\n  if (locale && !locale.code) {\n    throw new Error(\"date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`\");\n  }\n\n  return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {\n    timeZone: timeZone,\n    timeZoneName: length\n  });\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","tzIntlTimeZoneName","length","date","options","locale","code","Error","Intl","DateTimeFormat","undefined","timeZone","timeZoneName","dtf","formatToParts","formatted","format","replace","tzNameMatch","exec","substr"]
}
