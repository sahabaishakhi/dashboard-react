{
"version":3,
"file":"module$node_modules$date_fns$toDate$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGtGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAoCAC,QAAe,CAACC,QAAD,CAAW,CACxB,GAAIC,MAAOH,CAAAA,OAAX,EAAoB,CAApB,CAAuBI,SAAvB,CACA,KAAIC,OAASR,MAAOS,CAAAA,SAAUC,CAAAA,QAASC,CAAAA,IAA1B,CAA+BN,QAA/B,CAEb,IAAIA,QAAJ,WAAwBO,KAAxB,EAAoD,QAApD,GAAgC,MAAOP,SAAvC,EAA2E,eAA3E,GAAgEG,MAAhE,CAEE,MAAO,KAAII,IAAJ,CAASP,QAASQ,CAAAA,OAAT,EAAT,CACF,IAAwB,QAAxB,GAAI,MAAOR,SAAX,EAA+C,iBAA/C,GAAoCG,MAApC,CACL,MAAO,KAAII,IAAJ,CAASP,QAAT,CAEkB,SAAzB,GAAK,MAAOA,SAAZ;AAAgD,iBAAhD,GAAqCG,MAArC,EAAyF,WAAzF,GAAsE,MAAOM,QAA7E,GAEEA,OAAQC,CAAAA,IAAR,CAAa,kJAAb,CAEA,CAAAD,OAAQC,CAAAA,IAAR,CAAiBC,KAAJ,EAAYC,CAAAA,KAAzB,CAJF,CAOA,OAAO,KAAIL,IAAJ,CAASM,GAAT,CAjBe,CAlC1B,KAAIZ,OAEJa,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEjB,QAASiB,GAAX,CAAvC,CAFxB,CAAuBvB,OAAA,CAAQ,sDAAR,CAAvB,CAuDbC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA/D6E;",
"sources":["node_modules/date-fns/toDate/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$toDate$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\n\nvar _index = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nfunction toDate(argument) {\n  (0, _index.default)(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","default","toDate","argument","_index","arguments","argStr","prototype","toString","call","Date","getTime","console","warn","Error","stack","NaN","_interopRequireDefault","obj","__esModule"]
}
