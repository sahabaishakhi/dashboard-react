{
"version":3,
"file":"module$node_modules$date_fns_tz$toDate$index.js",
"lineCount":16,
"mappings":"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",
"sources":["node_modules/date-fns-tz/toDate/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns_tz$toDate$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\n\nvar _index = _interopRequireDefault(require(\"date-fns/_lib/toInteger/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _tzParseTimezone = _interopRequireDefault(require(\"../_lib/tzParseTimezone\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [/^([+-]\\d{2})$/, // 0 additional digits\n  /^([+-]\\d{3})$/, // 1 additional digit\n  /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [/^([+-]\\d{4})/, // 0 additional digits\n  /^([+-]\\d{5})/, // 1 additional digit\n  /^([+-]\\d{6})/ // 2 additional digits\n  ],\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  // timezone tokens (to identify the presence of a tz)\n  timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nfunction toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n  }\n\n  if (argument === null) {\n    return new Date(NaN);\n  }\n\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : (0, _index.default)(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  } // Clone the date\n\n\n  if (argument instanceof Date || typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || Object.prototype.toString.call(argument) === '[object Number]') {\n    return new Date(argument);\n  } else if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n  var year = parseYearResult.year;\n  var restDateString = parseYearResult.restDateString;\n  var date = parseDate(restDateString, year);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  }\n\n  if (date) {\n    var timestamp = date.getTime();\n    var time = 0;\n    var offset;\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time);\n\n      if (isNaN(time)) {\n        return new Date(NaN);\n      }\n    }\n\n    if (dateStrings.timezone || options.timeZone) {\n      offset = (0, _tzParseTimezone.default)(dateStrings.timezone || options.timeZone, new Date(timestamp + time));\n\n      if (isNaN(offset)) {\n        return new Date(NaN);\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = (0, _index2.default)(new Date(timestamp + time));\n      offset = (0, _index2.default)(new Date(timestamp + time + offset));\n    }\n\n    return new Date(timestamp + time + offset);\n  } else {\n    return new Date(NaN);\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimeter);\n  var timeString;\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n    dateStrings.timezone = array[2];\n\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits];\n  var patternYYYYY = patterns.YYYYY[additionalDigits];\n  var token; // YYYY or \u00b1YYYYY\n\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n\n  if (token) {\n    var yearString = token[1];\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    };\n  } // YY or \u00b1YYY\n\n\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n\n  if (token) {\n    var centuryString = token[1];\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    };\n  } // Invalid ISO-formatted year\n\n\n  return {\n    year: null\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null;\n  }\n\n  var token;\n  var date;\n  var month;\n  var week; // YYYY\n\n  if (dateString.length === 0) {\n    date = new Date(0);\n    date.setUTCFullYear(year);\n    return date;\n  } // YYYY-MM\n\n\n  token = patterns.MM.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month);\n    return date;\n  } // YYYY-DDD or YYYYDDD\n\n\n  token = patterns.DDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    var dayOfYear = parseInt(token[1], 10);\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear);\n    return date;\n  } // yyyy-MM-dd or YYYYMMDD\n\n\n  token = patterns.MMDD.exec(dateString);\n\n  if (token) {\n    date = new Date(0);\n    month = parseInt(token[1], 10) - 1;\n    var day = parseInt(token[2], 10);\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, day);\n    return date;\n  } // YYYY-Www or YYYYWww\n\n\n  token = patterns.Www.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week);\n  } // YYYY-Www-D or YYYYWwwD\n\n\n  token = patterns.WwwD.exec(dateString);\n\n  if (token) {\n    week = parseInt(token[1], 10) - 1;\n    var dayOfWeek = parseInt(token[2], 10) - 1;\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } // Invalid ISO-formatted date\n\n\n  return null;\n}\n\nfunction parseTime(timeString) {\n  var token;\n  var hours;\n  var minutes; // hh\n\n  token = patterns.HH.exec(timeString);\n\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'));\n\n    if (!validateTime(hours)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR;\n  } // hh:mm or hhmm\n\n\n  token = patterns.HHMM.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseFloat(token[2].replace(',', '.'));\n\n    if (!validateTime(hours, minutes)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n  } // hh:mm:ss or hhmmss\n\n\n  token = patterns.HHMMSS.exec(timeString);\n\n  if (token) {\n    hours = parseInt(token[1], 10);\n    minutes = parseInt(token[2], 10);\n    var seconds = parseFloat(token[3].replace(',', '.'));\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN;\n    }\n\n    return hours % 24 * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n  } // Invalid ISO-formatted time\n\n\n  return null;\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0;\n  day = day || 0;\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false;\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false;\n    }\n\n    var isLeapYear = isLeapYearIndex(year);\n\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false;\n    }\n\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false;\n  }\n\n  var isLeapYear = isLeapYearIndex(year);\n\n  if (isLeapYear && dayOfYear > 366) {\n    return false;\n  }\n\n  if (!isLeapYear && dayOfYear > 365) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false;\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false;\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false;\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","parseDate","dateString","year","token","length","date","Date","setUTCFullYear","patterns","MM","exec","month","parseInt","validateDate","NaN","DDD","dayOfYear","isLeapYear","MMDD","day","Www","week","dayOfISOWeekYear","WwwD","dayOfWeek","parseTime","timeString","HH","hours","parseFloat","replace","validateTime","MILLISECONDS_IN_HOUR","HHMM","minutes","MILLISECONDS_IN_MINUTE","HHMMSS","seconds","isoWeekYear","fourthOfJanuaryDay","getUTCDay","diff","setUTCDate","getUTCDate","DAYS_IN_MONTH_LEAP_YEAR","DAYS_IN_MONTH","Object","defineProperty","value","toDate","argument","dirtyOptions","arguments","TypeError","options","additionalDigits","DEFAULT_ADDITIONAL_DIGITS","_index","RangeError","prototype","toString","call","getTime","array","split","dateTimeDelimeter","plainTime","test","timezone","timeZoneDelimeter","substr","time","patternYYY","YYY","patternYYYYY","YYYYY","YYYY","yearString","slice","YY","centuryString","restDateString","isNaN","timestamp","timeZone","offset","_tzParseTimezone","_index2"]
}
