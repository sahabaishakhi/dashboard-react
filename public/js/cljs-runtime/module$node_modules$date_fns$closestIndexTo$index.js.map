{
"version":3,
"file":"module$node_modules$date_fns$closestIndexTo$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,iDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY9GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CATrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAuCAI,QAAuB,CAACC,kBAAD,CAAqBC,eAArB,CAAsC,CAC3D,GAAIC,OAAQP,CAAAA,OAAZ,EAAqB,CAArB,CAAwBQ,SAAxB,CACA,KAAIC,cAAgB,GAAIC,MAAOV,CAAAA,OAAX,EAAoBK,kBAApB,CAEpB,IAAIM,KAAA,CAAMF,aAAN,CAAJ,CACE,MAAOG,IAGT,KAAIC,cAAgBJ,aAAcK,CAAAA,OAAd,EAApB,CAWIC,MAXJ,CAYIC,WACOC,EAVY,IAAvBC,EAAIZ,eAAJY;AACe,EADfA,CAE8C,UAAvC,GAAI,MAAOZ,gBAAgBW,CAAAA,OAA3B,CACQX,eADR,CAGQa,KAAMC,CAAAA,SAAUC,CAAAA,KAAMC,CAAAA,IAAtB,CAA2BhB,eAA3B,CAKJW,EAAAA,OAAX,CAAmB,QAAS,CAACM,SAAD,CAAYC,KAAZ,CAAmB,CACzCC,SAAAA,CAAc,GAAIf,MAAOV,CAAAA,OAAX,EAAoBuB,SAApB,CAElB,IAAIZ,KAAA,CAAMc,SAAN,CAAJ,CAEET,WAAA,CADAD,MACA,CADSH,GADX,KAQA,IAFIc,SAEA,CAFWC,IAAKC,CAAAA,GAAL,CAASf,aAAT,CAAyBY,SAAYX,CAAAA,OAAZ,EAAzB,CAEX,CAAU,IAAV,EAAAC,MAAA,EAAkBW,SAAlB,CAA6BV,WAAjC,CACED,MACA,CADSS,KACT,CAAAR,WAAA,CAAcU,SAb6B,CAA/C,CAgBA,OAAOX,OArCoD,CArC7D,KAAIL,OAASb,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIa,QAAUV,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CA2EdC;MAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OArFqF;",
"sources":["node_modules/date-fns/closestIndexTo/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$closestIndexTo$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = closestIndexTo;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name closestIndexTo\n * @category Common Helpers\n * @summary Return an index of the closest date from the array comparing to the given date.\n *\n * @description\n * Return an index of the closest date from the array comparing to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now, `closestIndexTo` doesn't throw an exception\n *   when the second argument is not an array, and returns Invalid Date instead.\n *\n * @param {Date|Number} dateToCompare - the date to compare with\n * @param {Date[]|Number[]} datesArray - the array to search\n * @returns {Number} an index of the date closest to the given date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Which date is closer to 6 September 2015?\n * var dateToCompare = new Date(2015, 8, 6)\n * var datesArray = [\n *   new Date(2015, 0, 1),\n *   new Date(2016, 0, 1),\n *   new Date(2017, 0, 1)\n * ]\n * var result = closestIndexTo(dateToCompare, datesArray)\n * //=> 1\n */\nfunction closestIndexTo(dirtyDateToCompare, dirtyDatesArray) {\n  (0, _index2.default)(2, arguments);\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\n\n  if (isNaN(dateToCompare)) {\n    return NaN;\n  }\n\n  var timeToCompare = dateToCompare.getTime();\n  var datesArray; // `dirtyDatesArray` is undefined or null\n\n  if (dirtyDatesArray == null) {\n    datesArray = []; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n  } else if (typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array. Otherwise, make it empty Array\n  } else {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  }\n\n  var result;\n  var minDistance;\n  datesArray.forEach(function (dirtyDate, index) {\n    var currentDate = (0, _index.default)(dirtyDate);\n\n    if (isNaN(currentDate)) {\n      result = NaN;\n      minDistance = NaN;\n      return;\n    }\n\n    var distance = Math.abs(timeToCompare - currentDate.getTime());\n\n    if (result == null || distance < minDistance) {\n      result = index;\n      minDistance = distance;\n    }\n  });\n  return result;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","closestIndexTo","dirtyDateToCompare","dirtyDatesArray","_index2","arguments","dateToCompare","_index","isNaN","NaN","timeToCompare","getTime","result","minDistance","forEach","datesArray","Array","prototype","slice","call","dirtyDate","index","currentDate","distance","Math","abs"]
}
