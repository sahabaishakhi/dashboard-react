{
"version":3,
"file":"module$node_modules$date_fns$eachMonthOfInterval$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,sDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYnHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CATrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAsCAI,QAA4B,CAACC,aAAD,CAAgB,CAC1C,GAAIC,OAAQN,CAAAA,OAAZ,EAAqB,CAArB,CAAwBO,SAAxB,CACA,KAAIC,SAAWH,aAAXG,EAA4B,EAAhC,CACIC,UAAY,GAAIC,MAAOV,CAAAA,OAAX,EAAoBQ,QAASG,CAAAA,KAA7B,CAEZC,SAAAA,CADUC,GAAIH,MAAOV,CAAAA,OAAXa,EAAoBL,QAASM,CAAAA,GAA7BD,CACQE,CAAAA,OAAR,EACd,KAAIC,MAAQ,EAEZ,IAAI,EAAEP,SAAUM,CAAAA,OAAV,EAAF,EAAyBH,QAAzB,CAAJ,CACE,KAAM,KAAIK,UAAJ,CAAe,kBAAf,CAAN;AAGgBR,SACNS,CAAAA,QAAZ,CAAqB,CAArB,CAAwB,CAAxB,CAA2B,CAA3B,CAA8B,CAA9B,CAGA,KAJkBT,SAENU,CAAAA,OAAZ,CAAoB,CAApB,CAEA,CAJkBV,SAICM,CAAAA,OAAZ,EAAP,EAAgCH,QAAhC,CAAA,CACEI,KAAMI,CAAAA,IAAN,CAAW,GAAIV,MAAOV,CAAAA,OAAX,EALKS,SAKL,CAAX,CACA,CANgBA,SAMJY,CAAAA,QAAZ,CANgBZ,SAMiBa,CAAAA,QAAZ,EAArB,CAA8C,CAA9C,CAGF,OAAON,MArBmC,CApC5C,KAAIN,OAASb,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CA0DdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OApE0F;",
"sources":["node_modules/date-fns/eachMonthOfInterval/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$eachMonthOfInterval$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachMonthOfInterval;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * var result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\nfunction eachMonthOfInterval(dirtyInterval) {\n  (0, _index2.default)(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = (0, _index.default)(interval.start);\n  var endDate = (0, _index.default)(interval.end);\n  var endTime = endDate.getTime();\n  var dates = []; // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push((0, _index.default)(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","eachMonthOfInterval","dirtyInterval","_index2","arguments","interval","startDate","_index","start","endTime","endDate","end","getTime","dates","RangeError","setHours","setDate","push","setMonth","getMonth"]
}
