{
"version":3,
"file":"module$node_modules$date_fns$formatRFC7231$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc7GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAXrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAgCAI,QAAsB,CAACC,SAAD,CAAY,CAChC,GAAuB,CAAvB,CAAIC,SAAUC,CAAAA,MAAd,CACE,KAAM,KAAIC,SAAJ,CAAc,iCAAkCC,CAAAA,MAAlC,CAAyCH,SAAUC,CAAAA,MAAnD,CAA2D,UAA3D,CAAd,CAAN,CAGF,IAAIG,aAAe,GAAIC,MAAOX,CAAAA,OAAX,EAAoBK,SAApB,CAEnB,IAAI,CAAC,GAAIO,OAAQZ,CAAAA,OAAZ,EAAqBU,YAArB,CAAL,CACE,KAAM,KAAIG,UAAJ,CAAe,oBAAf,CAAN;AAGF,IAAIC,QAAUC,IAAA,CAAKL,YAAaM,CAAAA,SAAb,EAAL,CAAd,CACIC,WAAa,GAAIC,OAAQlB,CAAAA,OAAZ,EAAqBU,YAAaS,CAAAA,UAAb,EAArB,CAAgD,CAAhD,CADjB,CAEIC,UAAYC,MAAA,CAAOX,YAAaY,CAAAA,WAAb,EAAP,CAFhB,CAGIC,KAAOb,YAAac,CAAAA,cAAb,EAHX,CAIIC,KAAO,GAAIP,OAAQlB,CAAAA,OAAZ,EAAqBU,YAAagB,CAAAA,WAAb,EAArB,CAAiD,CAAjD,CAJX,CAKIC,OAAS,GAAIT,OAAQlB,CAAAA,OAAZ,EAAqBU,YAAakB,CAAAA,aAAb,EAArB,CAAmD,CAAnD,CACTC,aAAAA,CAAS,GAAIX,OAAQlB,CAAAA,OAAZ,EAAqBU,YAAaoB,CAAAA,aAAb,EAArB,CAAmD,CAAnD,CAEb,OAAO,EAAGrB,CAAAA,MAAH,CAAUK,OAAV,CAAmB,IAAnB,CAAyBL,CAAAA,MAAzB,CAAgCQ,UAAhC,CAA4C,GAA5C,CAAiDR,CAAAA,MAAjD,CAAwDW,SAAxD,CAAmE,GAAnE,CAAwEX,CAAAA,MAAxE,CAA+Ec,IAA/E,CAAqF,GAArF,CAA0Fd,CAAAA,MAA1F,CAAiGgB,IAAjG,CAAuG,GAAvG,CAA4GhB,CAAAA,MAA5G,CAAmHkB,MAAnH,CAA2H,GAA3H,CAAgIlB,CAAAA,MAAhI,CAAuIoB,YAAvI;AAA+I,MAA/I,CAnByB,CA9BlC,KAAIlB,OAASd,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIkB,QAAUf,sBAAA,CAAuBH,OAAA,CAAQ,4CAAR,CAAvB,CAFd,CAIIwB,QAAUrB,sBAAA,CAAuBH,OAAA,CAAQ,yDAAR,CAAvB,CAJd,CAQIqB,KAAO,6BAAA,CAAA,KAAA,CAAA,GAAA,CARX,CASIM,OAAS,iDAAA,CAAA,KAAA,CAAA,GAAA,CA2Cb1B,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA5DoF;",
"sources":["node_modules/date-fns/formatRFC7231/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$formatRFC7231$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = formatRFC7231;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../isValid/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/addLeadingZeros/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nfunction formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = (0, _index.default)(dirtyDate);\n\n  if (!(0, _index2.default)(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = (0, _index3.default)(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = (0, _index3.default)(originalDate.getUTCHours(), 2);\n  var minute = (0, _index3.default)(originalDate.getUTCMinutes(), 2);\n  var second = (0, _index3.default)(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","formatRFC7231","dirtyDate","arguments","length","TypeError","concat","originalDate","_index","_index2","RangeError","dayName","days","getUTCDay","dayOfMonth","_index3","getUTCDate","monthName","months","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds"]
}
