{"version":3,"sources":["io/ianalytics/d4d/api/systema.cljs"],"mappings":"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","names":["js/io","js/io.ianalytics","js/io.ianalytics.d4d","js/io.ianalytics.d4d.api","js/io.ianalytics.d4d.api.systema","js/io.ianalytics.d4d.api.systema.state","io.ianalytics.d4d.api.systema/state","cljs.core.atom","io.ianalytics.d4d.api.systema/C","io.ianalytics.d4d.api.systema/uid->node","uid","cljs.core/deref","cljs.core.get","io.ianalytics.d4d.api.systema/unmarshal-systema-nodes","nodes","a-nodes","cljs.core.into","iter__4652__auto__","s__35682","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__35684","cljs.core/chunk-buffer","i__35683","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35681","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","node","seq__35685","chunk__35686","count__35687","i__35688","vec__35709","cljs.core.nth","c__4679__auto__","cljs.core/chunk-first","vec__35722","cljs.core/next","_","a-node","p1__35680#","cljs.core.swap_BANG_","cljs.core.reduce","field","cljs.core.assoc","cljs.core/vec","s__35713","b__35715","i__35714","iter__35712","s__35726","b__35728","i__35727","iter__35725","io.ianalytics.d4d.api.systema/systema-graph","root","concepts","s__35733","b__35735","i__35734","iter__35732","cljs.core.keyword","js/io.ianalytics.d4d.api.systema.show","method-table__4747__auto__","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","fexpr__35744","cljs.core/MultiFn","cljs.core.symbol","io.ianalytics.d4d.api.systema/show","cljs.core/type","cljs.core.println","cljs.core/Atom","fexpr__35745","seq__35746","chunk__35747","count__35748","i__35749","io.ianalytics.d4d.api.systema/in?","x","y","p1__35751#","cljs.core/some","cljs.core._EQ_","io.ianalytics.d4d.api.systema/has?","io.ianalytics.d4d.api.systema/from?","p1__35754#","io.ianalytics.d4d.api.systema/to?","p1__35756#","var_args","G__35762","io.ianalytics.d4d.api.systema/elem?","js/Error","p1__35758#","io.ianalytics.d4d.api.systema.elem_QMARK_","or__4253__auto__","p1__35759#","fexpr__35767","io.ianalytics.d4d.api.systema/not-elem?","cljs.core/not","io.ianalytics.d4d.api.systema/concept?","p1__35768#","fexpr__35769","fexpr__35770","io.ianalytics.d4d.api.systema/instance??","and__4251__auto__","cljs.core.not_EQ_","fexpr__35772","G__35784","io.ianalytics.d4d.api.systema/is-a?","p1__35773#","concept","io.ianalytics.d4d.api.systema.is_a_QMARK_","p1__35775#","fexpr__35799","io.ianalytics.d4d.api.systema/is-not-a?","js/io.ianalytics.d4d.api.systema.pfn","fexpr__35802","io.ianalytics.d4d.api.systema/pfn","predicate","name","p1__35803#","regex","p1__35804#","cljs.core/re-matches","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","io.ianalytics.d4d.api.systema/&&","seq35811","self__4852__auto__","ps","p1__35809#","cljs.core/every?","fexpr__35815","io.ianalytics.d4d.api.systema/||","seq35817","p1__35816#","fexpr__35818","io.ianalytics.d4d.api.systema/$","arg","io.ianalytics.d4d.api.systema/get-","relation","fexpr__35819","cljs.core.distinct","cljs.core/flatten","s__35822","b__35824","i__35823","iter__35821","fexpr__35829","fexpr__35833","G__35840","io.ianalytics.d4d.api.systema/r-filter-","break-early","nested","io.ianalytics.d4d.api.systema.r_filter_","visited","grouped-nodes","cljs.core/group-by","cljs.core.comp","cljs.core/boolean","results","new-nodes","cljs.core.filter","cljs.core/complement","cljs.core/empty?","cljs.core/not-empty","io.ianalytics.d4d.api.systema/g-in","G__35851","nodes__35664__auto__","p__35665__auto__","io.ianalytics.d4d.api.systema.g_in","io.ianalytics.d4d.api.systema/gf-in","x__35666__auto__","cljs.core.apply","seq35854","io.ianalytics.d4d.api.systema/r-in","io.ianalytics.d4d.api.systema/rn-in","io.ianalytics.d4d.api.systema/rf-in","io.ianalytics.d4d.api.systema/g-has","G__35867","io.ianalytics.d4d.api.systema.g_has","io.ianalytics.d4d.api.systema/gf-has","seq35868","io.ianalytics.d4d.api.systema/r-has","io.ianalytics.d4d.api.systema/rn-has","io.ianalytics.d4d.api.systema/rf-has","io.ianalytics.d4d.api.systema/g-from","G__35870","io.ianalytics.d4d.api.systema.g_from","io.ianalytics.d4d.api.systema/gf-from","seq35873","io.ianalytics.d4d.api.systema/r-from","io.ianalytics.d4d.api.systema/rn-from","io.ianalytics.d4d.api.systema/rf-from","io.ianalytics.d4d.api.systema/g-to","G__35884","io.ianalytics.d4d.api.systema.g_to","io.ianalytics.d4d.api.systema/gf-to","seq35887","io.ianalytics.d4d.api.systema/r-to","io.ianalytics.d4d.api.systema/rn-to","io.ianalytics.d4d.api.systema/rf-to","G__35897","io.ianalytics.d4d.api.systema/tree-action","io.ianalytics.d4d.api.systema.tree_action","C","cljs.core.print","io.ianalytics.d4d.api.systema.gf_has","seq__35898","chunk__35899","count__35900","i__35901","plot","seq__35941","chunk__35942","count__35943","i__35944","seq__35951","chunk__35954","count__35955","i__35956","trend","io.ianalytics.d4d.api.systema._BAR__BAR_","fexpr__35947","fexpr__35948","fexpr__35974","fexpr__35977","G__35980","io.ianalytics.d4d.api.systema/make-tree","io.ianalytics.d4d.api.systema.make_tree","s__35983","b__35985","i__35984","iter__35982","subnode","fexpr__35997","G__36000","io.ianalytics.d4d.api.systema/print-tree","tree","io.ianalytics.d4d.api.systema.print_tree","indent","fexpr__36001","cljs.core/println","seq__36002","chunk__36003","count__36004","i__36005","child","io.ianalytics.d4d.api.systema/globals","sys","cljs.core/map?","cljs.core/vals","p1__36008#","cljs.core.partial","cljs.core/=","cljs.core.map","m","G__36022","io.ianalytics.d4d.api.systema/get-instances","io.ianalytics.d4d.api.systema.get_instances","globals","cljs.core.keep","cljs.core.get_in","io.ianalytics.d4d.api.systema/is-in?","parents","node-parents","parent-uids","p1__36023#","io.ianalytics.d4d.api.systema/make-typer","plot-concept","is-plot?","timeseries-concepts","n","G__36027","fexpr__36026","is-timeseries?","io.ianalytics.d4d.api.systema/build-raw-subtree","pred","child-uuids","uuid","G__36029","G__36030","G__36031","cljs.core/identity","io.ianalytics.d4d.api.systema/has-plots?","plots","p1__36032#","io.ianalytics.d4d.api.systema/has-timeseries?","p1__36043#","io.ianalytics.d4d.api.systema/buildTree","cljs.core/clj->js","G__36046","io.ianalytics.d4d.api.systema/getDescription","io.ianalytics.d4d.api.systema.getDescription","js/console.log","callback","error","url","io.ianalytics.d4d.api.core/API_URL","G__36048","response","js/window.fetch","json","cljs.core/assoc","cljs.core.js__GT_clj","cljs.core/reset!","io.ianalytics.d4d.api.systema/enrichNodesWithPlots","p__36052","vec__36054","typer","cljs.core/second","typed-nodes","p__36057","vec__36058","k","v","p__36061","vec__36062","p1__36050#","cljs.core.mapv","p1__36051#","G__36070","io.ianalytics.d4d.api.systema/nodePathAsString","io.ianalytics.d4d.api.systema.nodePathAsString","root-uid","graph","current-uid","current-parent-list","cljs.core.conj","p1__36067#","p1__36068#","cljs.core.remove","clojure.string.join","io.ianalytics.d4d.api.systema/nodePathAsNodeSeq","p1__36071#","p1__36072#","io.ianalytics.d4d.api.systema/isSpectrum","node-uid","io.ianalytics.d4d.api.systema/getRangeAndLength","fields","io.ianalytics.d4d.api.systema/which","io.ianalytics.d4d.api.systema._AMPERSAND__AMPERSAND_","io.ianalytics.d4d.api.systema/isCompressorMap","node-uid-x","node-uid-y","io.ianalytics.d4d.api.systema/displayUnit","default-display-unit","G__36084","io.ianalytics.d4d.api.units/display-unit-map","stored-unit","io.ianalytics.d4d.api.units/dimension","js/localStorage","clojure.string/lower-case","io.ianalytics.d4d.api.systema/timeseries-nodes","p1__36088#","io.ianalytics.d4d.api.systema/displayUnitGroups","node-uids","expanded-nodes","cljs.core.dedupe","io.ianalytics.d4d.api.systema/plotTitle","cljs.core/List"],"sourcesContent":["(ns io.ianalytics.d4d.api.systema\r\n  \"Provides functions to fetch and parse the Systema\r\n  configuration.\"\r\n  (:require [io.ianalytics.d4d.api.core :refer [API_URL]]\r\n            [io.ianalytics.d4d.api.units :refer [display-unit-map dimension]]\r\n            [clojure.string :as string]\r\n            [clojure.set :as set])\r\n  (:require-macros\r\n   [io.ianalytics.d4d.api.macros :as macros]))\r\n\r\n;;; Memo for systema state. When :URL is non-empty, :json holds the corresponding backend result, :graph its cljs representation.\r\n(defonce state\r\n  (atom {:url \"\"\r\n         :json nil\r\n         :graph nil}))\r\n\r\n(def C (atom nil))\r\n\r\n(defn uid->node [uid]\r\n  (-> @state :graph :nodes (get uid)))\r\n\r\n;;; ----------------------------------------------------------------------------\r\n;;; from @mar / systema-api.clj\r\n\r\n(defn unmarshal-systema-nodes\r\n  \"Unmarshal systema nodes into a hashmap {uid (atom node), ...} where all nodes hold\r\n  the atomic references to their neighbors (instead of uids).\"\r\n  [nodes]\r\n  (let [a-nodes (into {} (for [node nodes] [(:uid node) (atom node)]))]\r\n    (doseq [[_ a-node] a-nodes]\r\n      (swap! a-node\r\n             #(reduce (fn [node field]\r\n                        (assoc node field\r\n                               (vec (for [uid (field node)]\r\n                                      (get a-nodes uid)))))\r\n                      %\r\n                      [:in :has :from :to])))\r\n    a-nodes))\r\n\r\n(defn systema-graph\r\n  \"Make convenient systema graph-map from atomic-node-map.\"\r\n  [nodes]\r\n  (let [root     (get nodes \"0\")\r\n        concepts (into {} (for [node (:has @root)] [(-> @node :names first keyword) node]))]\r\n    {:nodes nodes :concepts concepts :root root}))\r\n\r\n(defmulti  show \"Print uid_long of nodes.\" type)\r\n(defmethod show nil              [node]  (println node))\r\n(defmethod show Atom             [node]  (println (@node :uid_long)))\r\n(defmethod show (type [])        [nodes] (doseq [node nodes] (show node)))\r\n\r\n;;; operators for testing node relations -- TODO does anyone use these? @cleanup\r\n(defn in?   [x y] (some #(= % y) (:in   @x)))\r\n(defn has?  [x y] (in? y x))\r\n(defn from? [x y] (some #(= % y) (:from @x)))\r\n(defn to?   [x y] (some #(= % y) (:to   @x)))\r\n\r\n\r\n(defn elem?                             ; -> \"in\"\r\n  \"Is the 'element of set' relation (transitive in-has relation). (elem? a a) is false.\"\r\n  ([y]   #(elem? % y))\r\n  ([x y] (or (in? x y) (some #(elem? % y) (@x :in)))))\r\n\r\n(defn not-elem? [x y] (not (elem? x y)))\r\n\r\n(defn concept?\r\n  \"Checks if a node is a direct element of root.\"\r\n  [node]\r\n  (some #(= (@% :uid) \"0\") (@node :in)))\r\n\r\n(defn instance??\r\n  \"Checks if a node is an instance.\"\r\n  [node]\r\n  (and node (not= (@node :uid) \"0\") (not (concept? node))))\r\n\r\n(defn is-a?\r\n  \"Checks if a node is an instance of a certain concept.\"\r\n  ([concept] #(is-a? % concept))\r\n  ([node concept]\r\n   (and (instance?? node)\r\n        (some #(and (concept? %) (or (= % concept) (elem? % concept)))\r\n              (@node :in)))))\r\n\r\n(defn is-not-a? [node concept] (not (is-a? node concept)))\r\n\r\n(defmulti  pfn type)\r\n(defmethod pfn (type #())  [predicate] predicate)\r\n(defmethod pfn Atom        [concept]   (is-a? concept))\r\n(defmethod pfn (type \"\")   [name]      (fn [node] (some #(= name %) (:names @node))))\r\n(defmethod pfn (type #\"\")  [regex]     (fn [node] (some #(re-matches regex %) (:names @node))))\r\n\r\n(defn && [& ps] (fn [node] (every? #((pfn %) node) ps)))\r\n(defn || [& ps] (fn [node] (some   #((pfn %) node) ps)))\r\n(defn $ [arg] (and arg (deref arg)))\r\n\r\n(defn get-\r\n  [nodes relation]\r\n  (if (instance? Atom nodes)\r\n    (@nodes relation)\r\n    (distinct (flatten (for [node nodes] (@node relation))))))\r\n\r\n(defn- r-filter-\r\n  \"Performs recursive filtering (breadth-first search) for `relation =\r\n  <:in|:has|:from|:to>`.\r\n  If `break-early = true`, the search stops at the first findings. If\r\n  `nested = true`,\r\n  the search steps also into branches of nodes that satisfy the\r\n  predicate (it goes everywhere).\"\r\n  ([predicate nodes relation break-early nested]\r\n   (let [nodes (if (instance? Atom nodes) (get- nodes relation) nodes)]\r\n     (r-filter- predicate nodes relation break-early nested #{})))\r\n\r\n  ([predicate nodes relation break-early nested visited]\r\n   (let [grouped-nodes  (group-by (comp boolean predicate) nodes)\r\n         results        (get grouped-nodes true)\r\n         new-nodes      (filter (complement visited)\r\n                                (get- (if nested nodes (get\r\n                                                        grouped-nodes false))\r\n                                      relation))]\r\n     (if (or (empty? new-nodes) (and break-early (not-empty results)))\r\n       results\r\n       (into results\r\n             (r-filter- predicate new-nodes relation break-early nested\r\n                        (into visited nodes)))))))\r\n\r\n\r\n\r\n(macros/generate-selection-functions in)\r\n(macros/generate-selection-functions has)\r\n(macros/generate-selection-functions from)\r\n(macros/generate-selection-functions to)\r\n\r\n;;; ----------------------------------------------------------------------------\r\n\r\n(defn tree-action\r\n  \"Return action based on systema description.\r\n   NODE is an atom wrapping a systema-node, C the concepts of the systema graph.\"\r\n  ([node]\r\n   (tree-action node (-> @state :graph :concepts)))\r\n  ([node C]\r\n   (cond\r\n     (is-a? node (C :Quantity ))\r\n     (if (is-a? node (C :Vector))\r\n       #(print \"     [ Plot heatmap ] \")\r\n       #(print \"     [ Plot single-trend with expectation band ] \"))\r\n     (is-a? node (C :TimeSeries))\r\n     (if (elem? node (C :Vector))\r\n       #(print \"     [ Plot heatmap ] \")\r\n       #(print \"     [ Plot single-trend ] \"))\r\n     (gf-has node (C :Plot))\r\n     (fn []\r\n       (println \"     [ Plot ############ ] \")\r\n       (doseq [plot (g-has node (C :Plot))]\r\n         (println \"* Plot\" (-> @plot :names first) \": \")\r\n         (doseq [trend (-> plot g-from (r-has (|| (C :Quantity) (C :TimeSeries))))]\r\n           (println \"  - Trend\" (@trend :uid)))))\r\n     :else #())))\r\n\r\n(defn make-tree\r\n  \"Generate tree for demonstration.\"\r\n  ([node] (make-tree node (-> @state :graph :concepts)))\r\n  ([node C]\r\n   {:name         (-> @node :fields :displayName)\r\n    :displayName  (-> @node :fields :displayName)\r\n    :uid          (-> @node :uid)\r\n    :node         node\r\n    :children     (for [subnode (@node :has) :when (and (is-not-a? subnode (C :Monitor))\r\n                                                        (is-not-a? subnode (C :Mean))\r\n                                                        (is-not-a? subnode (C :Measured))\r\n                                                        (is-not-a? subnode (C :Expected))\r\n                                                        (is-not-a? subnode (C :Variance))\r\n                                                        (is-not-a? subnode (C :KRI)))]\r\n                    (make-tree subnode C))\r\n    :action       (tree-action node C)}))\r\n\r\n(defn print-tree\r\n  \"Print tree for demonstration and trigger actions.\"\r\n  ([tree]\r\n   (print-tree tree \"\"))\r\n  ([tree indent]\r\n   (print indent (:name tree))\r\n   ((:action tree))\r\n   (println)\r\n   (doseq [child (:children tree)] (print-tree child (str indent \"  \")))))\r\n\r\n(comment \"Example usage\"\r\n         (print-tree (make-tree (-> @state :graph :concepts :Tree g-from first)\r\n                                (-> @state :graph :concepts))))\r\n\r\n;;; ----------------------------------------------------------------------------\r\n\r\n(defn- globals [sys]\r\n  (let [nodes (if (map? sys) (vals sys) sys)]\r\n    (->> nodes\r\n         (filter #(some (partial = \"0\") (get % \"in\")))\r\n         (map (fn [m] [(first (get m \"names\")) m]))\r\n         (into {}))))\r\n\r\n(defn- get-instances\r\n  ([concept sys] (get-instances concept sys (globals sys)))\r\n  ([concept sys globals]\r\n   (keep sys (into #{} (get-in globals [concept \"has\"])))))\r\n\r\n;;; ----------------------------------------------------------------------------\r\n\r\n(defn- is-in?\r\n  \"Takes a sequence of nodes `parents` and returns a function of\r\n  `node` that checks if `node` is in `parents`.\"\r\n  [parents]\r\n  (fn [node]\r\n    (let [node-parents (into #{} (get node \"in\"))\r\n          parent-uids (into #{} (map #(get % \"uid\") parents))]\r\n      (some node-parents parent-uids))))\r\n\r\n\r\n(defn make-typer\r\n  \"Takes sequence of Systema `nodes` and returns a closure to\r\n  type nodes.\r\n\r\n  Typed nodes have a property with a list of types.\"\r\n  [nodes]\r\n  (let [globals             (globals nodes)\r\n        plot-concept        (get globals \"Plot\")\r\n        is-plot?            (is-in? [plot-concept])\r\n        timeseries-concepts (filter (fn [n] ((into #{} (get-in globals [\"TimeSeries\" \"has\"]))\r\n                                             (get n \"uid\")))\r\n                                    nodes)\r\n        is-timeseries?      (is-in? timeseries-concepts)]\r\n    (fn [node]\r\n      (cond (is-plot? node)\r\n            (assoc node :type [\"plot\"])\r\n\r\n            (is-timeseries? node)\r\n            (assoc node :type [\"timeseries\"])\r\n\r\n            (map? node)\r\n            (assoc node :type [\"unknown\"])\r\n\r\n            :else\r\n            node))))\r\n\r\n\r\n(defn- build-raw-subtree\r\n  \"Build a node of a tree.\r\n\r\n  Node is excluded from the tree if\r\n\r\n    (pred node)\r\n\r\n  evaluates to true.\r\n\r\n  A node of a tree has a `children` property containing sequence\r\n  of subnodes.\"\r\n  [nodes node pred]\r\n  (let [child-uuids (get node \"has\")]\r\n    (when-not (pred node)\r\n      (assoc node :children (->> child-uuids\r\n                                 (map (fn [uuid] (build-raw-subtree nodes (get nodes uuid) pred)))\r\n                                 (filter identity))))))\r\n\r\n\r\n(defn has-plots?\r\n  \"Returns true if at least one child of `node` is of type plot.\"\r\n  [node]\r\n  (let [plots (filter #(some #{\"plot\"} (:type %)) (:children node))]\r\n    (if (seq plots) true false)))\r\n\r\n\r\n(defn has-timeseries?\r\n  \"Returns true if at least one child of `node` is of any 'TimeSeries' type.\"\r\n  [node]\r\n  (let [plots (filter #(some #{\"timeseries\"} (:type %)) (:children node))]\r\n    (if (seq plots) true false)))\r\n\r\n\r\n(defn ^Object buildTree\r\n  \"Build the tree to display from node sequence.\r\n\r\n  This relies on a :Tree node being attached to the root.\r\n  Nodes of concept 'Model' are excluded.\"\r\n  [^Object nodes]\r\n  (clj->js (make-tree (-> @state :graph :concepts :Tree g-from first)\r\n                      (-> @state :graph :concepts))))\r\n\r\n\r\n(defn getDescription\r\n  \"Retrieve current systems Systema description.\r\n\r\n  Systema description is an Object, where the properties are\r\n  the `uid`s and values are corresponding nodes.\r\n\r\n  This is memoized in @state, results will be fetched with respect to the API_URL.\"\r\n  ([] (getDescription js/console.log js/console.log))\r\n  ([callback] (getDescription callback js/console.log))\r\n  ([callback error]\r\n   (let [url      (str API_URL \"/system\")]\r\n\r\n     (cond\r\n       (= url (:url @state))\r\n       (callback (:json @state))\r\n\r\n       :else (let [response (js/window.fetch url)]\r\n               (-> response\r\n                   (.then (fn [response]\r\n                            (cond (= (.-status response) 200)\r\n                                  (-> response\r\n                                      (.json)\r\n                                      (.then (fn [json]\r\n                                               (swap! state\r\n                                                      assoc\r\n                                                      :url url\r\n                                                      :json json\r\n                                                      :graph (->> (js->clj json :keywordize-keys true)\r\n                                                                  vals\r\n                                                                  unmarshal-systema-nodes\r\n                                                                  systema-graph))\r\n                                               (reset! C (-> @state :graph :concepts))\r\n\r\n                                               (callback json))))\r\n\r\n                                  :else\r\n                                  (error response))))\r\n                   (.catch (fn [response]\r\n                             (js/console.log \"Error retrieving systema configuration:\" response)))))))))\r\n\r\n\r\n(defn enrichNodesWithPlots\r\n  \"Takes node sequence `nodes`. Attach node types and potential plots\r\n  to nodes of node sequence.\"\r\n  [nodes]\r\n  (let [nodes       (filter (fn [[_ node]] (map? node)) (js->clj nodes))\r\n        typer       (make-typer (map second nodes))\r\n        typed-nodes (into {} (->> nodes\r\n                                  (map (fn [[k v]] [k (typer v)]))))]\r\n    (->> typed-nodes\r\n         (map (fn [[uid node]]\r\n                [uid (let [node (assoc node :children (mapv #(get typed-nodes %) (get node \"has\")))]\r\n                       (if (has-timeseries? node)\r\n                         (let [plots (filter #(some #{\"timeseries\"} (:type %)) (:children node))]\r\n                           (-> node\r\n                               (assoc :type [\"plotStack\"]\r\n                                      :plots plots)))\r\n                         node))]))\r\n         (into {})\r\n         clj->js)))\r\n\r\n;;; ----------------------------------------------------------------------------\r\n;;; for use in jsx components\r\n\r\n(defn nodePathAsString\r\n  \"Return a string of node names on the tree path from UID to a root node, separated by '>'.\"\r\n  ([uid] (nodePathAsString uid (:uid @(first (:from @(:Tree (:concepts (:graph @state))))))))\r\n  ([uid root-uid]\r\n   (let [graph (js->clj (:json @state))\r\n         parent-uids (loop [current-uid uid\r\n                            parents (list)]\r\n                       (let [current-parent-list (get-in graph [current-uid \"in\"])]\r\n                         (if (or (empty? current-parent-list) (some #{root-uid} current-parent-list))\r\n                           parents\r\n                           (recur (first current-parent-list)\r\n                                  (conj parents (first current-parent-list))))))]\r\n     (->> parent-uids\r\n          (map (comp first #(get % \"names\") #(get graph %)))\r\n          (remove empty?)\r\n          (string/join \" > \")\r\n          clj->js))))\r\n\r\n\r\n(defn nodePathAsNodeSeq\r\n  \"Return a sequence of node uids on the tree path from UID to the graph root.\"\r\n  [uid]\r\n  (let [graph (js->clj (:json @state))\r\n        parent-uids (loop [current-uid uid\r\n                           parents (list)]\r\n                      (let [current-parent-list (get-in graph [current-uid \"in\"])]\r\n                        (if (empty? current-parent-list)\r\n                          parents\r\n                          (recur (first current-parent-list)\r\n                                 (conj parents (first current-parent-list))))))]\r\n    (->> parent-uids\r\n         (map (comp #(get % \"uid\") #(get graph %)))\r\n         (remove empty?)\r\n         clj->js)))\r\n\r\n(defn isSpectrum [node-uid]\r\n  (let [node (uid->node node-uid)\r\n        C    (-> @state :graph :concepts)]\r\n    (not (empty? (-> (uid->node node-uid)\r\n                     (r-in (C :Spectrum))\r\n                     first $ :fields)))))\r\n\r\n(defn getRangeAndLength [node-uid]\r\n  (let [C (-> @state :graph :concepts)]\r\n    (when-let [fields (-> (uid->node node-uid)\r\n                          (r-in (C :Spectrum))\r\n                          first $ :fields)]\r\n      (clj->js {:range (:range fields)\r\n                :length (:length fields)}))))\r\n\r\n(defn which [concept node-uid]\r\n  \"Return the name of the first CONCEPT of NODE-UID.\"\r\n  (let [C (-> @state :graph :concepts)]\r\n    (-> (uid->node node-uid)\r\n        (r-in (&& (elem? (C concept)) concept?))\r\n        first $ :names first)))\r\n\r\n(defn isCompressorMap [node-uid-x node-uid-y]\r\n  (and (= \"Volume Flow\" (which :Quantity node-uid-x))\r\n       (= \"Head\" (which :Quantity node-uid-y))))\r\n\r\n(defn displayUnit\r\n  \"Return the symbol for the unit that NODE-UID's data should be displayed as. This is either the default SI Unit for this nodes :Quantity, or the displayUnit defined in the systema description, or a user-defined localStorage entry for the lower-case name for this quantity.\"\r\n  [node-uid]\r\n  (let [default-display-unit\r\n        (or (-> (uid->node node-uid) $ :fields :influx :unit)\r\n            (:short (display-unit-map (which :Quantity node-uid))))\r\n        stored-unit\r\n        (and default-display-unit\r\n             (dimension default-display-unit)\r\n             (. js/localStorage getItem\r\n                (clojure.string/lower-case (dimension default-display-unit))))]\r\n    (clj->js (or\r\n              stored-unit\r\n              (and (is-a? (uid->node node-uid) (-> @state :graph :concepts :KRI)) \"KRI\")\r\n              (and (isSpectrum node-uid) node-uid)\r\n              default-display-unit\r\n              \"\"))))\r\n\r\n(defn timeseries-nodes [node-uid]\r\n  (let [C (-> @state :graph :concepts)]\r\n    (map #(:uid ($ %))\r\n         (-> (uid->node node-uid)\r\n             (r-has (C :TimeSeries))))))\r\n\r\n(defn displayUnitGroups [node-uids]\r\n  (let [C (-> @state :graph :concepts)\r\n        expanded-nodes\r\n        (dedupe (flatten (map timeseries-nodes node-uids)))]\r\n    (clj->js\r\n     (vals (group-by displayUnit (into #{} expanded-nodes))))))\r\n\r\n(defn plotTitle [node-uid]\r\n  (clj->js (nodePathAsString node-uid)))\r\n"]}