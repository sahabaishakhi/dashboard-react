{
"version":3,
"file":"module$$ianalytics$d4d$actions$index.js",
"lineCount":211,
"mappings":"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",
"sources":["@ianalytics/d4d/actions/index.js"],
"sourcesContent":["import { buildTree, enrichNodesWithPlots } from \"goog:io.ianalytics.d4d.api.systema\";\nimport SystemaAPI from \"goog:io.ianalytics.d4d.api.systema\";\nimport { groupEventsByID } from \"goog:io.ianalytics.d4d.api.event\";\nimport EventAPI from \"goog:io.ianalytics.d4d.api.event\";\nimport LabelAPI from \"goog:io.ianalytics.d4d.api.label\";\nimport CommentAPI from \"goog:io.ianalytics.d4d.api.comment\";\nimport { parseISO, isValid } from \"goog:module$node_modules$date_fns$index\";\n\nfunction midway(fromDate, toDate) {\n  if (isValid(toDate)) {\n    return new Date(fromDate.getTime() + 0.5 * (toDate - fromDate));\n  } else {\n    return fromDate;\n  }\n}\n\nfunction moveDateBy(dateFrom, delta_millis) {\n  return new Date(dateFrom.getTime() + delta_millis);\n} // Use as filter predicate to get unique elements in array\n\n\nfunction onlyUnique(value, index, self) {\n  return self.indexOf(value) === index;\n} // View reducer\n\n\nfunction updateMainView(newView) {\n  return {\n    mainView: newView\n  };\n} // Main reducer\n\n\nexport default function reducer(state, action) {\n  console.log(buildTree(action.payload));\n\n  switch (action.type) {\n    /* SYSTEMA */\n    case \"GET_SYSTEMA_DESCRIPTION\":\n      SystemaAPI.getDescription(function (payload) {\n        // console.log(\"case1\")\n        action.dispatch({\n          type: \"MERGE_SYSTEMA_DESCRIPTION\",\n          payload\n        });\n      });\n      return state;\n\n    case \"MERGE_SYSTEMA_DESCRIPTION\":\n      // console.log(action)\n      return { ...state,\n        systema: buildTree(action.payload),\n        systemaNodes: enrichNodesWithPlots(action.payload)\n      };\n\n    /* TIME RANGE SELECTOR */\n\n    case \"SELECT_TIME_RANGE\":\n      // console.log(action)\n      if (action.payload && action.payload.from && isValid(action.payload.from) && action.payload.to && isValid(action.payload.to)) {\n        // console.log(action)\n        localStorage.globalFrom = action.payload.from.toISOString();\n        localStorage.globalTo = action.payload.to.toISOString();\n        action.dispatch({\n          type: \"UPDATE_FILTERED_EVENTS\",\n          payload: { ...state,\n            timeSelection: action.payload,\n            dispatch: action.dispatch\n          }\n        });\n        return { ...state,\n          timeSelection: action.payload // ...updateMainView(state.mainView),\n\n        };\n      } else {\n        return state;\n      }\n\n    case \"SELECT_TIME_RANGE_FROM_EVENT\":\n      let eventId = action.payload;\n      const {\n        start,\n        end\n      } = state.events[eventId];\n      const {\n        from,\n        to\n      } = state.timeSelection;\n      let eventTime = midway(parseISO(start), parseISO(end));\n      let currentTime = midway(from, to);\n      let deltaTime = eventTime - currentTime;\n      return { ...state,\n        timeSelection: {\n          from: moveDateBy(state.timeSelection.from, deltaTime),\n          to: moveDateBy(state.timeSelection.to, deltaTime)\n        }\n      };\n\n    case \"PRESELECT_TIME_RANGE\":\n      return { ...state,\n        timeUserSelection: action.payload\n      };\n\n    case \"SWITCH_TO_PRESELECTED_TIME_RANGE\":\n      if (state.timeUserSelection && isValid(state.timeUserSelection[0]) && isValid(state.timeUserSelection[1])) {\n        return { ...state,\n          timeSelection: { ...state.timeSelection,\n            from: state.timeUserSelection[0],\n            to: state.timeUserSelection[1]\n          },\n          timeUserSelection: [null, null]\n        };\n      } else {\n        console.warn(\"invalid dates in preselection -- won't switch\");\n        return state;\n      }\n\n    case \"TOGGLE_PLOT_EVENT_CREATION_MODE\":\n      return { ...state,\n        plotDragMode: state.plotDragMode === \"zoom\" ? \"select\" : \"zoom\"\n      };\n\n    case \"TOGGLE_REFRESH\":\n      return { ...state,\n        plotsAutoUpdate: !state.plotsAutoUpdate\n      };\n\n    /* MAIN VIEW */\n\n    case \"UPDATE_MAIN_VIEW\":\n      return { ...state,\n        ...updateMainView(action.payload)\n      };\n\n    /*  EVENT */\n\n    case \"GET_ALL_EVENTS\":\n      EventAPI.getAllEvents(function (payload) {\n        action.dispatch({\n          type: \"MERGE_ALL_EVENTS\",\n          payload,\n          dispatch: action.dispatch\n        });\n      });\n      return state;\n\n    case \"MERGE_ALL_EVENTS\":\n      action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          events: groupEventsByID(action.payload)\n        }\n      });\n      return { ...state\n      };\n\n    case \"OPEN_EVENT_CREATOR\":\n      return { ...state,\n        eventCreatorOpen: true,\n        eventCreatorData: action.payload\n      };\n\n    case \"CLOSE_EVENT_CREATOR\":\n      return { ...state,\n        eventCreatorOpen: false\n      };\n\n    case \"CREATE_EVENT\":\n      EventAPI.createEvent(action.payload, function (payload) {\n        action.dispatch({\n          type: \"GET_EVENT\",\n          payload,\n          dispatch: action.dispatch\n        });\n      });\n      return state;\n\n    case \"GET_EVENT\":\n      EventAPI.getEvent(action.payload, function (payload) {\n        action.dispatch({\n          type: \"MERGE_EVENT\",\n          payload,\n          eventId: action.payload,\n          dispatch: action.dispatch\n        });\n      });\n      return state;\n\n    case \"MERGE_EVENT\":\n      let newEvents = { ...state.events\n      };\n      /* copying this so consumers receive updates */\n\n      newEvents[action.payload[0]._id] = action.payload[0];\n      action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          events: newEvents\n        }\n      });\n      return state;\n\n    case \"PIN_EVENT\":\n      return { ...state,\n        // action.payload is an event object\n        pinnedEvents: state.pinnedEvents.concat(action.payload._id)\n      };\n\n    case \"UNPIN_EVENT\":\n      return { ...state,\n        pinnedEvents: state.pinnedEvents.filter(eventId => eventId !== action.payload._id)\n      };\n\n    case \"DELETE_EVENT\":\n      EventAPI.deleteEvent(action.payload, function (payload) {\n        action.dispatch({\n          type: \"REMOVE_EVENT_FROM_STATE\",\n          payload: action.payload\n        });\n      });\n      return state;\n\n    case \"UPDATE_EVENT\":\n      EventAPI.updateEvent(action.payload, payload => action.dispatch({\n        type: \"GET_EVENT\",\n        payload: payload,\n        dispatch: action.dispatch\n      }));\n      return state;\n\n    case \"REMOVE_EVENT_FROM_STATE\":\n      let newEvents_ = { ...state.events\n      };\n      newPinnedEvents = state.pinnedEvents.filter(pinnedEvent => pinnedEvent._id !== action.payload);\n      newVisibleEvents = state.visibleEvents.filter(event => event._id !== action.payload);\n      /* copying this so consumers receive updates */\n\n      delete newEvents_[action.payload];\n      return { ...state,\n        events: newEvents_,\n        pinnedEvents: newPinnedEvents,\n        visibleEvents: newVisibleEvents\n      };\n\n    case \"COMBINE_PINNED_EVENTS\":\n      let pinnedEventObjects = state.pinnedEvents.map(id => state.events[id]);\n      EventAPI.combineEvents(pinnedEventObjects);\n      return state;\n    // TODO\n\n    /* LABEL */\n\n    case \"GET_ALL_LABELS\":\n      LabelAPI.getAllLabels(function (payload) {\n        action.dispatch({\n          type: \"MERGE_ALL_LABELS\",\n          payload\n        });\n      });\n      return state;\n\n    case \"MERGE_ALL_LABELS\":\n      let new_labels = action.payload.filter(new_label => !state.labels.find(state_label => state_label._id === new_label._id));\n      return { ...state,\n        labels: [...state.labels, ...new_labels]\n      };\n\n    case \"CREATE_LABEL\":\n      LabelAPI.createLabel(action.payload, function (payload) {\n        action.dispatch({\n          type: \"GET_LABEL\",\n          payload,\n          dispatch: action.dispatch\n        });\n      });\n      return state;\n\n    case \"GET_LABEL\":\n      LabelAPI.getLabel(action.payload, function (payload) {\n        action.dispatch({\n          type: \"MERGE_LABEL\",\n          payload\n        });\n      });\n      return state;\n\n    case \"MERGE_LABEL\":\n      return { ...state,\n        labels: state.labels.concat(action.payload)\n      };\n\n    case \"DELETE_LABEL\":\n      LabelAPI.deleteLabel(action.payload, function (payload) {\n        action.dispatch({\n          type: \"REMOVE_LABEL_FROM_STATE\",\n          payload: action.payload\n        });\n      });\n      return state;\n\n    case \"REMOVE_LABEL_FROM_STATE\":\n      return { ...state,\n        labels: state.labels.filter(label => label._id !== action.payload)\n      };\n\n    case \"GET_ALL_COMMENTS\":\n      CommentAPI.getAllComments(action.payload, function (payload) {\n        action.dispatch({\n          type: \"SET_COMMENTS\",\n          payload\n        });\n      });\n      return state;\n\n    case \"GET_EVENT_COMMENTS\":\n      CommentAPI.getEventComments(action.payload, function (payload) {\n        action.dispatch({\n          type: \"SET_COMMENTS\",\n          payload\n        });\n      });\n      return state;\n\n    case \"SET_COMMENTS\":\n      return { ...state,\n        comments: action.payload\n      };\n\n    case \"CREATE_COMMENT\":\n      CommentAPI.createComment(action.payload);\n      return { ...state,\n        comments: [...state.comments, action.payload]\n      };\n\n    case \"MERGE_COMMENTS\":\n      return { ...state,\n        comments: state.comments.concat(action.payload)\n      };\n\n    case \"UPDATE_EXPANDED_SYSTEMA_NODES\":\n      return { ...state,\n        expandedSystemaNodes: action.payload\n      };\n\n    case \"UPDATE_SELECTED_SYSTEMA_NODES\":\n      return { ...state,\n        selectedSystemaNodes: action.payload\n      };\n\n    case \"EXPAND_ALL_SYSTEMA_NODES\":\n      return { ...state,\n        expandedSystemaNodes: Object.keys(state.systemaNodes)\n      };\n\n    case \"COLLAPSE_ALL_SYSTEMA_NODES\":\n      return { ...state,\n        expandedSystemaNodes: []\n      };\n\n    case \"OPEN_EVENT_DETAILS\":\n      return { ...state,\n        eventDetailsOpen: true,\n        eventDetailsEventUID: action.payload\n      };\n\n    case \"CLOSE_EVENT_DETAILS\":\n      return { ...state,\n        eventDetailsOpen: false\n      };\n\n    /* EVENT FILTER */\n\n    case \"UPDATE_FILTERED_EVENTS\":\n      /* This action is dispatched after every event filter action.\r\n      `visibleEvents` object gets mutated here. */\n      function isVisible(state, event) {\n        // severity\n        selectedSeverities = action.payload.eventFilter.selectedSeverities;\n        excludedLabels = action.payload.eventFilter.excludedLabels;\n        const severity = event.severity; // free text\n\n        const freeText = action.payload.eventFilter.freeText;\n        const matchesFreeText = freeText == \"\" || !freeText ? true : event.description ? event.description.toLowerCase().includes(freeText.toLowerCase()) : false; // label\n\n        const excludedByLabel = excludedLabels.reduce((excluded, excludedLabel) => excluded || event.label.includes(excludedLabel), false); // event date or creation date\n\n        const eventStart = parseISO(event.start);\n        const eventEnd = parseISO(event.end);\n        const selectionFrom = action.payload.timeSelection.from;\n        const selectionTo = action.payload.timeSelection.to; // include events that have some overlap with the time selection\n        // (can reach out left and/or right out of the selection)\n\n        const excludedByTimeSelection = action.payload.eventFilter.onlySelectedTimeRange ? selectionFrom >= eventEnd || selectionTo <= eventStart : false; // creation date\n\n        const createDate = parseISO(event.createDate);\n        const excludedByCreateDate = action.payload.eventFilter.onlySelectedCreateTimeRange ? !(selectionFrom <= createDate && createDate <= selectionTo) : false;\n        return selectedSeverities.includes(severity) && !excludedByLabel && matchesFreeText && !excludedByTimeSelection && !excludedByCreateDate;\n      }\n\n      const events = action.payload.events;\n      const visibleEvents = events ? Object.values(events).filter(event => res = isVisible(state, event)) : [];\n      return { ...state,\n        timeSelection: action.payload.timeSelection,\n        events: action.payload.events,\n        eventFilter: action.payload.eventFilter,\n        visibleEvents: visibleEvents\n      };\n\n    case \"UPDATE_EVENT_FILTER_SEVERITIES\":\n      action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          eventFilter: { ...state.eventFilter,\n            selectedSeverities: action.payload\n          }\n        }\n      });\n      return state;\n\n    case \"UPDATE_EVENT_FILTER_LABELS\":\n      labelId = action.payload._id;\n      isAlreadyExcluded = state.eventFilter.excludedLabels.includes(labelId);\n      excludedLabels = isAlreadyExcluded ? excludedLabels.filter(excludedLabelId => labelId !== excludedLabelId) : [...state.eventFilter.excludedLabels, labelId];\n      action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          eventFilter: { ...state.eventFilter,\n            excludedLabels: excludedLabels\n          }\n        }\n      });\n      return state;\n\n    case \"UPDATE_EVENT_FILTER_FREE_TEXT\":\n      action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          eventFilter: { ...state.eventFilter,\n            freeText: action.payload\n          }\n        }\n      });\n      return state;\n\n    case \"UPDATE_EVENT_FILTER_ONLY_SELECTED_TIME_RANGE\":\n      const onlySelectedTimeRange = state.eventFilter.onlySelectedTimeRange;\n      const onlySelectedCreateTimeRange = state.eventFilter.onlySelectedCreateTimeRange;\n      const dateType = action.payload;\n      dateType === \"event\" ? action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          eventFilter: { ...state.eventFilter,\n            onlySelectedTimeRange: !onlySelectedTimeRange\n          }\n        }\n      }) : action.dispatch({\n        type: \"UPDATE_FILTERED_EVENTS\",\n        payload: { ...state,\n          eventFilter: { ...state.eventFilter,\n            onlySelectedCreateTimeRange: !onlySelectedCreateTimeRange\n          }\n        }\n      });\n      return state;\n\n    default:\n      console.warn(\"reducer: cannot handle action with unknown type!\", action);\n      return state;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],
"names":["midway","fromDate","toDate","isValid","Date","getTime","moveDateBy","dateFrom","delta_millis","onlyUnique","value","index","self","indexOf","updateMainView","newView","mainView","reducer","state","action","console","log","buildTree","payload","type","SystemaAPI","getDescription","dispatch","systema","systemaNodes","enrichNodesWithPlots","from","to","localStorage","globalFrom","toISOString","globalTo","timeSelection","eventId","start","end","events","eventTime","parseISO","currentTime","deltaTime","timeUserSelection","warn","plotDragMode","plotsAutoUpdate","EventAPI","getAllEvents","groupEventsByID","eventCreatorOpen","eventCreatorData","createEvent","getEvent","newEvents","_id","pinnedEvents","concat","filter","deleteEvent","updateEvent","newEvents_","newPinnedEvents","pinnedEvent","newVisibleEvents","visibleEvents","event","pinnedEventObjects","map","id","combineEvents","LabelAPI","getAllLabels","new_labels","new_label","labels","find","state_label","createLabel","getLabel","deleteLabel","label","CommentAPI","getAllComments","getEventComments","comments","createComment","expandedSystemaNodes","selectedSystemaNodes","Object","keys","eventDetailsOpen","eventDetailsEventUID","isVisible","selectedSeverities","eventFilter","excludedLabels","severity","freeText","matchesFreeText","description","toLowerCase","includes","excludedByLabel","reduce","excluded","excludedLabel","eventStart","eventEnd","selectionFrom","selectionTo","excludedByTimeSelection","onlySelectedTimeRange","createDate","excludedByCreateDate","onlySelectedCreateTimeRange","values","res","labelId","isAlreadyExcluded","excludedLabelId","dateType","$jscomp$tmp$exports$module$name"]
}
