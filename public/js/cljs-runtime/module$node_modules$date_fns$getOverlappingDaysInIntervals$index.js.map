{
"version":3,
"file":"module$node_modules$date_fns$getOverlappingDaysInIntervals$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,gEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY7HC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CATrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CA2EAI,QAAsC,CAACC,iBAAD,CAAoBC,kBAApB,CAAwC,CAC5E,GAAIC,OAAQP,CAAAA,OAAZ,EAAqB,CAArB,CAAwBQ,SAAxB,CACA,KAAIC,aAAeJ,iBAAfI,EAAoC,EAAxC,CACIC,cAAgBJ,kBAAhBI,EAAsC,EAD1C,CAEIC,cAAgB,GAAIC,MAAOZ,CAAAA,OAAX,EAAoBS,YAAaI,CAAAA,KAAjC,CAAwCC,CAAAA,OAAxC,EAChBC,aAAAA;AAAc,GAAIH,MAAOZ,CAAAA,OAAX,EAAoBS,YAAaO,CAAAA,GAAjC,CAAsCF,CAAAA,OAAtC,EAClB,KAAIG,eAAiB,GAAIL,MAAOZ,CAAAA,OAAX,EAAoBU,aAAcG,CAAAA,KAAlC,CAAyCC,CAAAA,OAAzC,EACjBI,cAAAA,CAAe,GAAIN,MAAOZ,CAAAA,OAAX,EAAoBU,aAAcM,CAAAA,GAAlC,CAAuCF,CAAAA,OAAvC,EAEnB,IAAI,EAAEH,aAAF,EAAmBI,YAAnB,EAAkCE,cAAlC,EAAoDC,aAApD,CAAJ,CACE,KAAM,KAAIC,UAAJ,CAAe,kBAAf,CAAN,CAKF,MAFoBR,cAEpB,CAFoCO,aAEpC,EAFoDD,cAEpD,CAFqEF,YAErE,CAOOK,IAAKC,CAAAA,IAAL,GAFcH,aAAAI,CAAeP,YAAfO,CAA6BP,YAA7BO,CAA2CJ,aAEzD,GAHgBD,cAAAM,CAAiBZ,aAAjBY,CAAiCZ,aAAjCY,CAAiDN,cAGjE,GAA2BO,mBAA3B,CAPP,CACS,CAhBmE,CAzE9E,KAAIZ;AAASf,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEIa,QAAUV,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAFd,CAMI8B,oBAAsB,KA4F1B7B,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OA1GoG;",
"sources":["node_modules/date-fns/getOverlappingDaysInIntervals/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$getOverlappingDaysInIntervals$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getOverlappingDaysInIntervals;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `getOverlappingDaysInRanges` to `getOverlappingDaysInIntervals`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   getOverlappingDaysInRanges(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   getOverlappingDaysInIntervals(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nfunction getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  (0, _index2.default)(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = (0, _index.default)(intervalLeft.start).getTime();\n  var leftEndTime = (0, _index.default)(intervalLeft.end).getTime();\n  var rightStartTime = (0, _index.default)(intervalRight.start).getTime();\n  var rightEndTime = (0, _index.default)(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n\n  if (!isOverlapping) {\n    return 0;\n  }\n\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","getOverlappingDaysInIntervals","dirtyIntervalLeft","dirtyIntervalRight","_index2","arguments","intervalLeft","intervalRight","leftStartTime","_index","start","getTime","leftEndTime","end","rightStartTime","rightEndTime","RangeError","Math","ceil","overlapEndDate","overlapStartDate","MILLISECONDS_IN_DAY"]
}
