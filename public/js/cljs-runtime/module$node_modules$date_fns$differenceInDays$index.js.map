{
"version":3,
"file":"module$node_modules$date_fns$differenceInDays$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,mDAAA,CAAwE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAchHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAMrCG,QAASA,gBAAe,CAACC,QAAD,CAAWC,SAAX,CAAsB,CACxCC,QAAAA,CAAOF,QAASG,CAAAA,WAAT,EAAPD,CAAgCD,SAAUE,CAAAA,WAAV,EAAhCD,EAA2DF,QAASI,CAAAA,QAAT,EAA3DF,CAAiFD,SAAUG,CAAAA,QAAV,EAAjFF,EAAyGF,QAASK,CAAAA,OAAT,EAAzGH,CAA8HD,SAAUI,CAAAA,OAAV,EAA9HH,EAAqJF,QAASM,CAAAA,QAAT,EAArJJ,CAA2KD,SAAUK,CAAAA,QAAV,EAA3KJ,EAAmMF,QAASO,CAAAA,UAAT,EAAnML,CAA2ND,SAAUM,CAAAA,UAAV,EAA3NL,EAAqPF,QAASQ,CAAAA,UAAT,EAArPN,CAA6QD,SAAUO,CAAAA,UAAV,EAA7QN;AAAuSF,QAASS,CAAAA,eAAT,EAAvSP,CAAoUD,SAAUQ,CAAAA,eAAV,EAExU,OAAW,EAAX,CAAIP,QAAJ,CACS,CAAC,CADV,CAEkB,CAAX,CAAIA,QAAJ,CACE,CADF,CAGEA,QARmC,CAjB9CQ,MAAOC,CAAAA,cAAP,CAAsBjB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CkB,MAAO,CAAA,CADoC,CAA7C,CAGAlB,QAAQI,CAAAA,OAAR,CAgFAe,QAAyB,CAACC,aAAD,CAAgBC,cAAhB,CAAgC,CACvD,GAAIC,OAAQlB,CAAAA,OAAZ,EAAqB,CAArB,CAAwBmB,SAAxB,CACA,KAAIjB,SAAW,GAAIkB,MAAOpB,CAAAA,OAAX,EAAoBgB,aAApB,CAAf,CACIb,UAAY,GAAIiB,MAAOpB,CAAAA,OAAX,EAAoBiB,cAApB,CADhB,CAEII,KAAOpB,eAAA,CAAgBC,QAAhB,CAA0BC,SAA1B,CAFX,CAGImB,WAAaC,IAAKC,CAAAA,GAAL,CAAS,GAAIC,OAAQzB,CAAAA,OAAZ,EAAqBE,QAArB,CAA+BC,SAA/B,CAAT,CACjBD,SAASwB,CAAAA,OAAT,CAAiBxB,QAASK,CAAAA,OAAT,EAAjB,CAAsCc,IAAtC,CAA6CC,UAA7C,CAGIK,SAAAA,CAAmBC,MAAA,CAAO3B,eAAA,CAAgBC,QAAhB;AAA0BC,SAA1B,CAAP,GAAgD,CAACkB,IAAjD,CACVA,KAATQ,EAAiBP,UAAjBO,CAA8BF,QAElC,OAAkB,EAAX,GAAAE,IAAA,CAAe,CAAf,CAAmBA,IAZ6B,CA9EzD,KAAIT,OAASvB,sBAAA,CAAuBH,OAAA,CAAQ,2CAAR,CAAvB,CAAb,CAEI+B,QAAU5B,sBAAA,CAAuBH,OAAA,CAAQ,6DAAR,CAAvB,CAFd,CAIIwB,QAAUrB,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAyFdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OArGuF;",
"sources":["node_modules/date-fns/differenceInDays/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$differenceInDays$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = differenceInDays;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../differenceInCalendarDays/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nfunction differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  (0, _index3.default)(2, arguments);\n  var dateLeft = (0, _index.default)(dirtyDateLeft);\n  var dateRight = (0, _index.default)(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs((0, _index2.default)(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","compareLocalAsc","dateLeft","dateRight","diff","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","Object","defineProperty","value","differenceInDays","dirtyDateLeft","dirtyDateRight","_index3","arguments","_index","sign","difference","Math","abs","_index2","setDate","isLastDayNotFull","Number","result"]
}
