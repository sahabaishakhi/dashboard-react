{
"version":3,
"file":"module$node_modules$date_fns$clamp$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,wCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcrGC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEE,QAASF,GAAX,CAAvC,CAXrCG,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CO,MAAO,CAAA,CADoC,CAA7C,CAGAP,QAAQI,CAAAA,OAAR,CAoCAI,QAAc,CAACC,IAAD,CAAOC,IAAP,CAAa,CAAA,IACrBC,MAAQD,IAAKC,CAAAA,KADQ,CAErBC,IAAMF,IAAKE,CAAAA,GACf,IAAIC,OAAQT,CAAAA,OAAZ,EAAqB,CAArB,CAAwBU,SAAxB,CACA,OAAO,GAAIC,OAAQX,CAAAA,OAAZ,EAAqB,CAAC,GAAIY,MAAOZ,CAAAA,OAAX,EAAoB,CAACK,IAAD,CAAOE,KAAP,CAApB,CAAD,CAAqCC,GAArC,CAArB,CAJkB,CAlC3B,KAAII,OAASf,sBAAA,CAAuBH,OAAA,CAAQ,wCAAR,CAAvB,CAAb,CAEIiB,QAAUd,sBAAA,CAAuBH,OAAA,CAAQ,wCAAR,CAAvB,CAFd;AAIIe,QAAUZ,sBAAA,CAAuBH,OAAA,CAAQ,sDAAR,CAAvB,CAqCdC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQI,CAAAA,OAjD4E;",
"sources":["node_modules/date-fns/clamp/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$clamp$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = clamp;\n\nvar _index = _interopRequireDefault(require(\"../max/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../min/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @name clamp\n * @category Interval Helpers\n * @summary Return a date bounded by the start and the end of the given interval\n *\n * @description\n * Clamps a date to the lower bound with the start of the interval and the upper\n * bound with the end of the interval.\n *\n * - When the date is less than the start of the interval, the start is returned.\n * - When the date is greater than the end of the interval, the end is returned.\n * - Otherwise the date is returned.\n *\n * @example\n * // What is Mar, 21, 2021 bounded to an interval starting at Mar, 22, 2021 and ending at Apr, 01, 2021\n * const result = clamp(new Date(2021, 2, 21), {\n *   start: new Date(2021, 2, 22),\n *   end: new Date(2021, 3, 1),\n * })\n * //=> Mon Mar 22 2021 00:00:00\n *\n * @param {Date | Number} date - the date to be bounded\n * @param {Interval} interval - the interval to bound to\n * @returns {Date} the date bounded by the start and the end of the interval\n * @throws {TypeError} 2 arguments required\n */\nfunction clamp(date, _ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  (0, _index3.default)(2, arguments);\n  return (0, _index2.default)([(0, _index.default)([date, start]), end]);\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","clamp","date","_ref","start","end","_index3","arguments","_index2","_index"]
}
