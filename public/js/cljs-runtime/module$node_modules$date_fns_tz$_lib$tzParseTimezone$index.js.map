{
"version":3,
"file":"module$node_modules$date_fns_tz$_lib$tzParseTimezone$index.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,CAAA,0DAAA,CAA+E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6EvHC,QAASA,WAAU,CAACC,IAAD,CAAOC,cAAP,CAAuB,CACpCC,cAAAA,CAAS,GAAIC,MAAOC,CAAAA,OAAX,EAAoBJ,IAApB,CAA0BC,cAA1B,CACTI,eAAAA,CAAQC,IAAKC,CAAAA,GAAL,CAASL,cAAA,CAAO,CAAP,CAAT,CAAoBA,cAAA,CAAO,CAAP,CAApB,CAAgC,CAAhC,CAAmCA,cAAA,CAAO,CAAP,CAAnC,CAA8CA,cAAA,CAAO,CAAP,CAA9C,CAA0D,EAA1D,CAA8DA,cAAA,CAAO,CAAP,CAA9D,CAAyEA,cAAA,CAAO,CAAP,CAAzE,CACRM,KAAAA,CAAOR,IAAKS,CAAAA,OAAL,EACX,KAAIC,KAAOF,IAAPE,CAAc,GAElB,OAAOL,eAAP,EADAG,IACA,EADgB,CAAR,EAAAE,IAAA,CAAYA,IAAZ,CAAmB,GAAnB,CAA0BA,IAClC,EANwC,CA1E1CC,MAAOC,CAAAA,cAAP,CAAsBd,OAAtB,CAA+B,YAA/B,CAA6C,CAC3Ce,MAAO,CAAA,CADoC,CAA7C,CAGAf,QAAQM,CAAAA,OAAR;AAeAU,QAAwB,CAACb,cAAD,CAAiBD,IAAjB,CAAuBe,SAAvB,CAAkC,CACxD,IAAIC,KAKJ,IAFAA,KAEA,CAFQC,QAASC,CAAAA,SAAUC,CAAAA,IAAnB,CAAwBlB,cAAxB,CAER,CACE,MAAO,EAOT,IAFAe,KAEA,CAFQC,QAASG,CAAAA,UAAWD,CAAAA,IAApB,CAAyBlB,cAAzB,CAER,CAQE,MAPAoB,eAOO,CAPCC,QAAA,CAASN,KAAA,CAAM,CAAN,CAAT,CAAmB,EAAnB,CAOD,CADUK,cACV,EADkBE,oBAClB,CAAa,GAAb,GAAAP,KAAA,CAAM,CAAN,CAAA,CAAmB,CAACQ,cAApB,CAAqCA,cAM9C,IAFAR,KAEA,CAFQC,QAASQ,CAAAA,YAAaN,CAAAA,IAAtB,CAA2BlB,cAA3B,CAER,CAAW,CACToB,cAAA,CAAQC,QAAA,CAASN,KAAA,CAAM,CAAN,CAAT,CAAmB,EAAnB,CACJU,KAAAA,CAAUJ,QAAA,CAASN,KAAA,CAAM,CAAN,CAAT,CAAmB,EAAnB,CAEd,IA0Da,IA1Db,EAA6BU,IAA7B,GA0DgC,CA1DhC,CAA6BA,IAA7B,EA0D+C,EA1D/C,CAA6BA,IAA7B,EACE,MAAOC,IAGTH,eAAA,CAAiBH,cAAjB,CAAyBE,oBAAzB,CAAgDG,IAAhD;AAA0DE,sBAC1D,OAAoB,GAAb,GAAAZ,KAAA,CAAM,CAAN,CAAA,CAAmB,CAACQ,cAApB,CAAqCA,cATnC,CAsEX,GAAI,CACFK,IAAKC,CAAAA,cAAL,CAAoBC,IAAAA,EAApB,CAA+B,CAC7BC,SA3D0B/B,cA0DG,CAA/B,CAGA,KAAA,yBAAO,CAAA,CAJL,CAKF,MAAOgC,KAAP,CAAc,CACd,wBAAA,CAAO,CAAA,CADO,CA9DhB,MAAI,yBAAJ,EACEjC,IAIO,CAJA,IAAIM,IAAJ,CAASN,IAAT,EAAiBM,IAAK4B,CAAAA,GAAL,EAAjB,CAIA,CAHOnB,SAAA,CAAYf,KAAZ,CAAYA,IAAZ,EAAmB,KAUnC,CAVmC,IAUnC,CAAA,KAAA,CAAO,IAAIM,IAAJ,CAASA,IAAKC,CAAAA,GAAL,CAASP,KAAKmC,CAAAA,WAAL,EAAT,CAA6BnC,KAAKoC,CAAAA,QAAL,EAA7B,CAA8CpC,KAAKqC,CAAAA,OAAL,EAA9C,CAA8DrC,KAAKsC,CAAAA,QAAL,EAA9D,CAA+EtC,KAAKuC,CAAAA,UAAL,EAA/E,CAAkGvC,KAAKwC,CAAAA,UAAL,EAAlG,CAAqHxC,KAAKyC,CAAAA,eAAL,EAArH,CAAT,CAVS,CAGP,CAFHC,KAEG,CAFM3C,UAAA,CADC4C,KACD,CAAoB1C,cAApB,CAEN;AADWc,SAAA,CAAY2B,cAAZ,CAAYA,KAAZ,EAuBhBE,SAIJ,CA3ByC5C,IAqBtBS,CAAAA,OAALoC,EAMd,CA3ByCH,KA2BzC,CAFII,IAEJ,CAFS/C,UAAA,CAAW,IAAIO,IAAJ,CAASsC,SAAT,CAAX,CAzBgC3C,cAyBhC,CAET,CA3ByCyC,KA2BzC,GAAeI,IAAf,CACE,cADF,CA3ByCJ,KA2BzC,EAOIK,cAGF,CAHOhD,UAAA,CAAW,IAAIO,IAAJ,CAFpBsC,SAEoB,EAFRE,IAEQ,CAlCqBJ,KAkCrB,EAAX,CAlCgCzC,cAkChC,CAGP,CAAA,cAAA,CADE6C,IAAJ,GAAWC,cAAX,CACSD,IADT,CAKOE,IAAKC,CAAAA,GAAL,CAASH,IAAT,CAAaC,cAAb,CAdP,CA3BoB,CACX,CAAA,CADWG,cAJpB,EAQO,CAjDiD,CAb1D,KAAI/C,OAEJgD,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIC,CAAAA,UAAX,CAAwBD,GAAxB,CAA8B,CAAEhD,QAASgD,GAAX,CAAvC,CAFxB,CAAuBxD,OAAA,CAAQ,2DAAR,CAAvB,CAAb,CAII2B,qBAAuB,IAJ3B,CAKIK;AAAyB,GAL7B,CAMIX,SAAW,CACbqC,SAAU,YADG,CAEbpC,UAAW,OAFE,CAGbE,WAAY,iBAHC,CAIbK,aAAc,0BAJD,CAmHf5B,OAAOC,CAAAA,OAAP,CAAiBA,OAAQM,CAAAA,OAjI8F;",
"sources":["node_modules/date-fns-tz/_lib/tzParseTimezone/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns_tz$_lib$tzParseTimezone$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tzParseTimezone;\n\nvar _index = _interopRequireDefault(require(\"../tzTokenizeDate/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/\n}; // Parse various time zone offset formats to an offset in milliseconds\n\nfunction tzParseTimezone(timezoneString, date, isUtcDate) {\n  var token;\n  var absoluteOffset; // Z\n\n  token = patterns.timezoneZ.exec(timezoneString);\n\n  if (token) {\n    return 0;\n  }\n\n  var hours; // \u00b1hh\n\n  token = patterns.timezoneHH.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n\n    if (!validateTimezone(hours)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // \u00b1hh:mm or \u00b1hhmm\n\n\n  token = patterns.timezoneHHMM.exec(timezoneString);\n\n  if (token) {\n    hours = parseInt(token[2], 10);\n    var minutes = parseInt(token[3], 10);\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN;\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n  } // IANA time zone\n\n\n  if (isValidTimezoneIANAString(timezoneString)) {\n    date = new Date(date || Date.now());\n    var utcDate = isUtcDate ? date : toUtcDate(date);\n    var offset = calcOffset(utcDate, timezoneString);\n    var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n    return -fixedOffset;\n  }\n\n  return 0;\n}\n\nfunction toUtcDate(date) {\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n}\n\nfunction calcOffset(date, timezoneString) {\n  var tokens = (0, _index.default)(date, timezoneString);\n  var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5]);\n  var asTS = date.getTime();\n  var over = asTS % 1000;\n  asTS -= over >= 0 ? over : 1000 + over;\n  return asUTC - asTS;\n}\n\nfunction fixOffset(date, offset, timezoneString) {\n  var localTS = date.getTime(); // Our UTC time is just a guess because our offset is just a guess\n\n  var utcGuess = localTS - offset; // Test whether the zone matches the offset for this ts\n\n  var o2 = calcOffset(new Date(utcGuess), timezoneString); // If so, offset didn't change and we're done\n\n  if (offset === o2) {\n    return offset;\n  } // If not, change the ts by the difference in the offset\n\n\n  utcGuess -= o2 - offset; // If that gives us the local time we want, we're done\n\n  var o3 = calcOffset(new Date(utcGuess), timezoneString);\n\n  if (o2 === o3) {\n    return o2;\n  } // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n\n\n  return Math.max(o2, o3);\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isValidTimezoneIANAString(timeZoneString) {\n  try {\n    Intl.DateTimeFormat(undefined, {\n      timeZone: timeZoneString\n    });\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","calcOffset","date","timezoneString","tokens","_index","default","asUTC","Date","UTC","asTS","getTime","over","Object","defineProperty","value","tzParseTimezone","isUtcDate","token","patterns","timezoneZ","exec","timezoneHH","hours","parseInt","MILLISECONDS_IN_HOUR","absoluteOffset","timezoneHHMM","minutes","NaN","MILLISECONDS_IN_MINUTE","Intl","DateTimeFormat","undefined","timeZone","error","now","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","offset","utcDate","utcGuess","localTS","o2","o3","Math","max","fixedOffset","_interopRequireDefault","obj","__esModule","timezone"]
}
