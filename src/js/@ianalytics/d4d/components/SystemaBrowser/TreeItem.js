import React from "react";
import { withStyles, makeStyles } from "@material-ui/core/styles";
import { TreeView, TreeItem } from "@material-ui/lab";
import { useStateValue } from "/@ianalytics/d4d/components/StateProvider";
import SystemaAPI from "goog:io.ianalytics.d4d.api.systema";
const useStyles = makeStyles({
  plotStack: {// background: "#171e27",
  }
});
const HighlightedTreeItem = withStyles(theme => ({
  iconContainer: {
    "& .close": {
      opacity: 0.3,
      borderTop: "1px solid #728ba6"
    }
  },
  group: {
    marginLeft: 4,
    paddingLeft: 8 // borderLeft: `1px dashed #728ba6`,
    // background: "#1d2630",

  }
}))(props => /*#__PURE__*/React.createElement(TreeItem, props));
const DefaultTreeItem = withStyles(theme => ({
  iconContainer: {
    "& .close": {
      opacity: 0.3,
      borderTop: "1px solid #728ba6"
    }
  },
  group: {
    marginLeft: 4,
    paddingLeft: 8,
    borderLeft: `1px dashed #728ba63f`,
    background: "#171e27"
  }
}))(props => /*#__PURE__*/React.createElement(TreeItem, props));

function PlotStackTreeItem({
  node,
  children
}) {
  const [state, dispatch] = useStateValue();
  classes = useStyles();
  return /*#__PURE__*/React.createElement(HighlightedTreeItem, {
    className: classes.plotStack,
    id: "nav_" + node.uid,
    label: node.fields.displayName,
    nodeId: node.uid,
    onClick: () => {
      dispatch({
        type: "UPDATE_MAIN_VIEW",
        payload: {
          mainType: "plotStack",
          meta: node
        }
      });
    }
  }, children);
}

export default function SystemaTreeItem(props) {
  if (props.node.type && props.node.type.includes("plotStack")) {
    return /*#__PURE__*/React.createElement(PlotStackTreeItem, {
      id: "nav_" + props.node.uid,
      node: props.node
    }, props.children);
  } else if (props.node.type && props.node.type.includes("measured")) {
    return /*#__PURE__*/React.createElement(PlotStackTreeItem, {
      id: "nav_" + props.node.uid,
      node: props.node
    }, props.children);
  } else {
    return /*#__PURE__*/React.createElement(DefaultTreeItem, {
      id: "nav_" + props.node.uid,
      label: props.node.displayName,
      nodeId: props.node.uid
    }, props.children);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzeC9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9TeXN0ZW1hQnJvd3Nlci9UcmVlSXRlbS5qc3giXSwibmFtZXMiOlsiUmVhY3QiLCJ3aXRoU3R5bGVzIiwibWFrZVN0eWxlcyIsIlRyZWVWaWV3IiwiVHJlZUl0ZW0iLCJ1c2VTdGF0ZVZhbHVlIiwiU3lzdGVtYUFQSSIsInVzZVN0eWxlcyIsInBsb3RTdGFjayIsIkhpZ2hsaWdodGVkVHJlZUl0ZW0iLCJ0aGVtZSIsImljb25Db250YWluZXIiLCJvcGFjaXR5IiwiYm9yZGVyVG9wIiwiZ3JvdXAiLCJtYXJnaW5MZWZ0IiwicGFkZGluZ0xlZnQiLCJwcm9wcyIsIkRlZmF1bHRUcmVlSXRlbSIsImJvcmRlckxlZnQiLCJiYWNrZ3JvdW5kIiwiUGxvdFN0YWNrVHJlZUl0ZW0iLCJub2RlIiwiY2hpbGRyZW4iLCJzdGF0ZSIsImRpc3BhdGNoIiwiY2xhc3NlcyIsInVpZCIsImZpZWxkcyIsImRpc3BsYXlOYW1lIiwidHlwZSIsInBheWxvYWQiLCJtYWluVHlwZSIsIm1ldGEiLCJTeXN0ZW1hVHJlZUl0ZW0iLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLFNBQVNDLFVBQVQsRUFBcUJDLFVBQXJCLFFBQXVDLDBCQUF2QztBQUVBLFNBQVNDLFFBQVQsRUFBbUJDLFFBQW5CLFFBQW1DLGtCQUFuQztBQUVBLFNBQVNDLGFBQVQsUUFBOEIsMkNBQTlCO0FBRUEsT0FBT0MsVUFBUCxNQUF1QixvQ0FBdkI7QUFFQSxNQUFNQyxTQUFTLEdBQUdMLFVBQVUsQ0FBQztBQUMzQk0sRUFBQUEsU0FBUyxFQUFFLENBQ1Q7QUFEUztBQURnQixDQUFELENBQTVCO0FBTUEsTUFBTUMsbUJBQW1CLEdBQUdSLFVBQVUsQ0FBRVMsS0FBRCxLQUFZO0FBQ2pEQyxFQUFBQSxhQUFhLEVBQUU7QUFDYixnQkFBWTtBQUNWQyxNQUFBQSxPQUFPLEVBQUUs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LFdBRnBCO0FBR0UsTUFBQSxNQUFNLEVBQUVaLEtBQUssQ0FBQ0ssSUFBTixDQUFXSztBQUhyQixPQUtHVixLQUFLLENBQUNNLFFBTFQsQ0FERjtBQVNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHdpdGhTdHlsZXMsIG1ha2VTdHlsZXMgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XHJcblxyXG5pbXBvcnQgeyBUcmVlVmlldywgVHJlZUl0ZW0gfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2xhYlwiO1xyXG5cclxuaW1wb3J0IHsgdXNlU3RhdGVWYWx1ZSB9IGZyb20gXCIvQGlhbmFseXRpY3MvZDRkL2NvbXBvbmVudHMvU3RhdGVQcm92aWRlclwiO1xyXG5cclxuaW1wb3J0IFN5c3RlbWFBUEkgZnJvbSBcImdvb2c6aW8uaWFuYWx5dGljcy5kNGQuYXBpLnN5c3RlbWFcIjtcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoe1xyXG4gIHBsb3RTdGFjazoge1xyXG4gICAgLy8gYmFja2dyb3VuZDogXCIjMTcxZTI3XCIsXHJcbiAgfSxcclxufSk7XHJcblxyXG5jb25zdCBIaWdobGlnaHRlZFRyZWVJdGVtID0gd2l0aFN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgaWNvbkNvbnRhaW5lcjoge1xyXG4gICAgXCImIC5jbG9zZVwiOiB7XHJcbiAgICAgIG9wYWNpdHk6IDAuMyxcclxuICAgICAgYm9yZGVyVG9wOiBcIjFweCBzb2xpZCAjNzI4YmE2XCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgZ3JvdXA6IHtcclxuICAgIG1hcmdpbkxlZnQ6IDQsXHJcbiAgICBwYWRkaW5nTGVmdDogOCxcclxuICAgIC8vIGJvcmRlckxlZnQ6IGAxcHggZGFzaGVkICM3MjhiYTZgLFxyXG4gICAgLy8gYmFja2dyb3VuZDogXCIjMWQyNjMwXCIsXHJcbiAgfSxcclxufSkpKChwcm9wcykgPT4gPFRyZWVJdGVtIHsuLi5wcm9wc30gLz4pO1xyXG5cclxuY29uc3QgRGVmYXVsdFRyZWVJdGVtID0gd2l0aFN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgaWNvbkNvbnRhaW5lcjoge1xyXG4gICAgXCImIC5jbG9zZVwiOiB7XHJcbiAgICAgIG9wYWNpdHk6IDAuMyxcclxuICAgICAgYm9yZGVyVG9wOiBcIjFweCBzb2xpZCAjNzI4YmE2XCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgZ3JvdXA6IHtcclxuICAgIG1hcmdpbkxlZnQ6IDQsXHJcbiAgICBwYWRkaW5nTGVmdDogOCxcclxuICAgIGJvcmRlckxlZnQ6IGAxcHggZGFzaGVkICM3MjhiYTYzZmAsXHJcbiAgICBiYWNrZ3JvdW5kOiBcIiMxNzFlMjdcIixcclxuICB9LFxyXG59KSkoKHByb3BzKSA9PiA8VHJlZUl0ZW0gey4uLnByb3BzfSAvPik7XHJcblxyXG5mdW5jdGlvbiBQbG90U3RhY2tUcmVlSXRlbSh7IG5vZGUsIGNoaWxkcmVuIH0pIHtcclxuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZVN0YXRlVmFsdWUoKTtcclxuICBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8SGlnaGxpZ2h0ZWRUcmVlSXRlbVxyXG4gICAgICBjbGFzc05hbWU9e2NsYXNzZXMucGxvdFN0YWNrfVxyXG4gICAgICBpZD17XCJuYXZfXCIgKyBub2RlLnVpZH1cclxuICAgICAgbGFiZWw9e25vZGUuZmllbGRzLmRpc3BsYXlOYW1lfVxyXG4gICAgICBub2RlSWQ9e25vZGUudWlkfVxyXG4gICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgZGlzcGF0Y2goe1xyXG4gICAgICAgICAgdHlwZTogXCJVUERBVEVfTUFJTl9WSUVXXCIsXHJcbiAgICAgICAgICBwYXlsb2FkOiB7XHJcbiAgICAgICAgICAgIG1haW5UeXBlOiBcInBsb3RTdGFja1wiLFxyXG4gICAgICAgICAgICBtZXRhOiBub2RlLFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAge2NoaWxkcmVufVxyXG4gICAgPC9IaWdobGlnaHRlZFRyZWVJdGVtPlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN5c3RlbWFUcmVlSXRlbShwcm9wcykge1xyXG4gIGlmIChwcm9wcy5ub2RlLnR5cGUgJiYgcHJvcHMubm9kZS50eXBlLmluY2x1ZGVzKFwicGxvdFN0YWNrXCIpKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8UGxvdFN0YWNrVHJlZUl0ZW0gaWQ9e1wibmF2X1wiICsgcHJvcHMubm9kZS51aWR9IG5vZGU9e3Byb3BzLm5vZGV9PlxyXG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cclxuICAgICAgPC9QbG90U3RhY2tUcmVlSXRlbT5cclxuICAgICk7XHJcbiAgfSBlbHNlIGlmIChwcm9wcy5ub2RlLnR5cGUgJiYgcHJvcHMubm9kZS50eXBlLmluY2x1ZGVzKFwibWVhc3VyZWRcIikpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxQbG90U3RhY2tUcmVlSXRlbSBpZD17XCJuYXZfXCIgKyBwcm9wcy5ub2RlLnVpZH0gbm9kZT17cHJvcHMubm9kZX0+XHJcbiAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICA8L1Bsb3RTdGFja1RyZWVJdGVtPlxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPERlZmF1bHRUcmVlSXRlbVxyXG4gICAgICAgIGlkPXtcIm5hdl9cIiArIHByb3BzLm5vZGUudWlkfVxyXG4gICAgICAgIGxhYmVsPXtwcm9wcy5ub2RlLmRpc3BsYXlOYW1lfVxyXG4gICAgICAgIG5vZGVJZD17cHJvcHMubm9kZS51aWR9XHJcbiAgICAgID5cclxuICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgIDwvRGVmYXVsdFRyZWVJdGVtPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19