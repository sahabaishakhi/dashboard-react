import React, { useState, useMemo, useEffect } from "react";
import { useStateValue } from "/@ianalytics/d4d/components/StateProvider";
import { parseISO, isValid, differenceInSeconds } from "date-fns";
export const traceColors = ["#78A21A", "#eab83a", "#25A9DB", "#D54073", "#5C6CE5", "#B76300", "#ce5150", "#2878c1", "#ef843c"];
export const allPlotlyButtons = ["pan2d", "zoom2d", "zoomIn2d", "zoomOut2d", "autoScale2d", "resetScale2d", "hoverClosestCartesian", "hoverCompareCartesian", "toggleHover", "resetViews", "toImage", "sendDataToCloud", "toggleSpikelines", "resetViewMapbox"]; // this is just the Plotly.icons.pencil but I can't be bothered to fix the imports at this time.

export const toggleEventCreationIcon = {
  width: 1792,
  height: 1792,
  path: "M491 1536l91-91-235-235-91 91v107h128v128h107zm523-928q0-22-22-22-10 0-17 7l-542 542q-7 7-7 17 0 22 22 22 10 0 17-7l542-542q7-7 7-17zm-54-192l416 416-832 832h-416v-416zm683 96q0 53-37 90l-166 166-416-416 166-165q36-38 90-38 53 0 91 38l235 234q37 39 37 91z",
  transform: "matrix(1 0 0 1 0 1)"
};
export function widthOfMeanWindowInSeconds(from, to, nPoints = 512) {
  let seconds = Math.abs(differenceInSeconds(to, from));
  return seconds >= nPoints ? Math.floor(seconds / nPoints) : 1;
}
export function makeAnnotations(uids, state) {
  const eventColors = {
    warning: "#f5a030",
    high: "#f7a630",
    info: "#00deee",
    failure: "#ff0000"
  };
  let opacity = 0.25;
  const related_events = [];
  let eventAnnotations = [],
      eventShapes = [];
  let startWasTruncated = false;

  for (const uid of uids) {
    for (const e of state.visibleEvents) {
      if ((e.node && e.node.indexOf(uid) !== -1 || state.pinnedEvents.indexOf(e._id) !== -1) && related_events.indexOf(e) === -1) {
        related_events.push(e);
      }
    }
  }

  for (const e of related_events) {
    let eventStart = e.start && parseISO(e.start),
        eventEnd = e.end && parseISO(e.end),
        eventColor = eventColors[e.severity],
        selectedFrom = state.timeSelection.from,
        selectedTo = state.timeSelection.to;

    if (!isValid(eventEnd)) {
      eventEnd = selectedTo;
      opacity = 0.1;
    }

    if (eventEnd < selectedFrom || selectedTo < eventStart) {
      continue;
    }

    if (eventStart < selectedFrom) {
      eventStart = selectedFrom;
      startWasTruncated = true;
    }

    if (selectedTo < eventEnd) {
      eventEnd = selectedTo;
    }

    eventAnnotations.push({
      x: eventStart,
      y: 1.01 + startWasTruncated * 0.25,
      xref: "x",
      yref: "paper",
      textangle: startWasTruncated ? 0 : -45,
      showarrow: !startWasTruncated,
      text: e.description
    });
    eventShapes.push({
      xref: "x",
      yref: "paper",
      x0: eventStart,
      x1: eventEnd,
      y0: 0,
      y1: 1,
      type: "rect",
      line: {
        width: 0
      },
      fillcolor: eventColor,
      opacity: opacity
    });
    eventShapes.push({
      xref: "x",
      yref: "paper",
      x0: eventStart,
      x1: eventEnd,
      y0: 1.001,
      y1: 1.001,
      type: "line",
      line: {
        width: 1,
        color: eventColor
      }
    });
  }

  return [eventAnnotations, eventShapes];
}

function sum(a, b) {
  return a + b;
}

function mean(values) {
  return values.reduce(sum) / values.length;
}

function mean_and_sdev(values) {
  const m = mean(values);
  const standard_deviation = Math.sqrt(values.map(x => (x - m) ** 2).reduce(sum) / values.length);
  return [m, standard_deviation];
}

export function autorange(plotData, compressAxis = false) {
  // set the vertical axis to include 2% padding above and
  // below the supremum and infimum of the data shown.
  //
  // when compressAxis is true, show at most 3 standard
  // deviations above and below the mean, so outliers don't
  // throw the whole plot off.
  if (!plotData) return [];
  let range = [Infinity, -Infinity];

  for (datum in plotData) {
    if (plotData[datum] && plotData[datum].hasOwnProperty("y") && plotData[datum].y !== undefined && Array.isArray(plotData[datum].y)) {
      const values = plotData[datum].y.filter(v => v !== null && !isNaN(v));
      const [m, s] = mean_and_sdev(values);

      if (compressAxis) {
        range = [Math.min(range[0], Math.max(Math.min(...values) * 0.98, Math.min(m - Math.abs(3 * s), 0.98 * m))), Math.max(range[1], Math.min(Math.max(...values) * 1.02, Math.max(m + Math.abs(3 * s), 1.02 * m)))];
      } else {
        range = [Math.min(range[0], Math.min(...values) * 0.98), Math.max(range[1], Math.max(...values) * 1.02)];
      }
    }
  }

  return range;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzeC9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9QbG90L3Bsb3RmdW5zLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlTWVtbyIsInVzZUVmZmVjdCIsInVzZVN0YXRlVmFsdWUiLCJwYXJzZUlTTyIsImlzVmFsaWQiLCJkaWZmZXJlbmNlSW5TZWNvbmRzIiwidHJhY2VDb2xvcnMiLCJhbGxQbG90bHlCdXR0b25zIiwidG9nZ2xlRXZlbnRDcmVhdGlvbkljb24iLCJ3aWR0aCIsImhlaWdodCIsInBhdGgiLCJ0cmFuc2Zvcm0iLCJ3aWR0aE9mTWVhbldpbmRvd0luU2Vjb25kcyIsImZyb20iLCJ0byIsIm5Qb2ludHMiLCJzZWNvbmRzIiwiTWF0aCIsImFicyIsImZsb29yIiwibWFrZUFubm90YXRpb25zIiwidWlkcyIsInN0YXRlIiwiZXZlbnRDb2xvcnMiLCJ3YXJuaW5nIiwiaGlnaCIsImluZm8iLCJmYWlsdXJlIiwib3BhY2l0eSIsInJlbGF0ZWRfZXZlbnRzIiwiZXZlbnRBbm5vdGF0aW9ucyIsImV2ZW50U2hhcGVzIiwic3RhcnRXYXNUcnVuY2F0ZWQiLCJ1aWQiLCJlIiwidmlzaWJsZUV2ZW50cyIsIm5vZGUiLCJpbmRleE9mIiwicGlubmVkRXZlbnRzIiwiX2lkIiwicHVzaCIsImV2ZW50U3RhcnQiLCJzdGFydCIsImV2ZW50RW5kIiwiZW5kIiwiZXZlbnRDb2xvciIsInNldmVyaXR5Iiwic2VsZWN0ZWRGcm9tIiwidGltZVNlbGVjdGlvbiIsInNlbGVjdGVkVG8iLCJ4IiwieSIsInhyZWYiLCJ5cmVmIiwidGV4dGFuZ2xlIiwic2hvd2Fycm93IiwidGV4dCIsImRlc2NyaXB0aW9uIiwieDAiLCJ4MSIsInkwIiwieTEiLCJ0eXBlIiwibGluZSIsImZpbGxjb2xvciIsImNvbG9yIiwic3VtIiwiYSIsImIiLCJtZWFuIiwidmFsdWVzIiwicmVkdWNlIiwibGVuZ3RoIiwibWVhbl9hbmRfc2RldiIsIm0iLCJzdGFuZGFyZF9kZXZpYXRpb24iLCJzcXJ0IiwibWFwIiwiYXV0b3JhbmdlIiwicGxvdERhdGEiLCJjb21wcmVzc0F4aXMiLCJyYW5nZSIsIkluZmluaXR5IiwiZGF0dW0iLCJoYXNPd25Qcm9wZXJ0eSIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImZpbHRlciIsInYiLCJpc05hTiIsInMiLCJtaW4iLCJtYXgiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFFBQWhCLEVBQTBCQyxPQUExQixFQUFtQ0MsU0FBbkMsUUFBb0QsT0FBcEQ7QUFDQSxTQUFTQyxhQUFULFFBQThCLDJDQUE5QjtBQUNBLFNBQVNDLFFBQVQsRUFBbUJDLE9BQW5CLEVBQTRCQyxtQkFBNUIsUUFBdUQsVUFBdkQ7QUFFQSxPQUFPLE1BQU1DLFdBQVcsR0FBRyxDQUN6QixTQUR5QixFQUV6QixTQUZ5QixFQUd6QixTQUh5QixFQUl6QixTQUp5QixFQUt6QixTQUx5QixFQU16QixTQU55QixFQU96QixTQVB5QixFQVF6QixTQVJ5QixFQVN6QixTQVR5QixDQUFwQjtBQVdQLE9BQU8sTUFBTUMsZ0JBQWdCLEdBQUcsQ0FDOUIsT0FEOEIsRUFFOUIsUUFGOEIsRUFHOUIsVUFIOEIsRUFJOUIsV0FKOEIsRUFLOUIsYUFMOEIsRUFNOUIsY0FOOEIsRUFPOUIsdUJBUDhCLEVBUTlCLHVCQVI4QixFQVM5QixhQVQ4QixFQVU5QixZQVY4QixFQVc5QixTQVg4QixFQVk5QixpQkFaOEIsRUFhOUIsa0JBYjhCLEVBYzlCLGlCQWQ4QixDQUF6QixDLENBaUJQOztBQUNBLE9BQU8sTUFBTUMsdUJBQXVCLEdBQUc7QUFDckNDLEVBQUFBLEtBQUssRUFBRSxJQUQ4QjtBQUVyQ0MsRUFBQUEsTUFBTSxFQUFFLElBRjZCO0FBR3JDQyxFQUFBQSxJQUFJLEVBQ0YsaVFBSm1DO0FBS3JDQyxFQUFBQSxTQUFTLEVBQUU7QUFMMEIsQ0FBaEM7QUFRUCxPQUFPLFNBQVNDLDBCQUFULENBQW9DQyxJQUFwQyxFQUEwQ0Ms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Q0FBU1osS0FBSyxDQUFDLENBQUQsQ0FBZCxFQUFtQmhFLElBQUksQ0FBQzRFLEdBQUwsQ0FBUyxHQUFHdkIsTUFBWixJQUFzQixJQUF6QyxDQUZNLENBQVI7QUFJRDtBQUNGO0FBQ0Y7O0FBRUQsU0FBT1csS0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VNZW1vLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgdXNlU3RhdGVWYWx1ZSB9IGZyb20gXCIvQGlhbmFseXRpY3MvZDRkL2NvbXBvbmVudHMvU3RhdGVQcm92aWRlclwiO1xyXG5pbXBvcnQgeyBwYXJzZUlTTywgaXNWYWxpZCwgZGlmZmVyZW5jZUluU2Vjb25kcyB9IGZyb20gXCJkYXRlLWZuc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRyYWNlQ29sb3JzID0gW1xyXG4gIFwiIzc4QTIxQVwiLFxyXG4gIFwiI2VhYjgzYVwiLFxyXG4gIFwiIzI1QTlEQlwiLFxyXG4gIFwiI0Q1NDA3M1wiLFxyXG4gIFwiIzVDNkNFNVwiLFxyXG4gIFwiI0I3NjMwMFwiLFxyXG4gIFwiI2NlNTE1MFwiLFxyXG4gIFwiIzI4NzhjMVwiLFxyXG4gIFwiI2VmODQzY1wiLFxyXG5dO1xyXG5leHBvcnQgY29uc3QgYWxsUGxvdGx5QnV0dG9ucyA9IFtcclxuICBcInBhbjJkXCIsXHJcbiAgXCJ6b29tMmRcIixcclxuICBcInpvb21JbjJkXCIsXHJcbiAgXCJ6b29tT3V0MmRcIixcclxuICBcImF1dG9TY2FsZTJkXCIsXHJcbiAgXCJyZXNldFNjYWxlMmRcIixcclxuICBcImhvdmVyQ2xvc2VzdENhcnRlc2lhblwiLFxyXG4gIFwiaG92ZXJDb21wYXJlQ2FydGVzaWFuXCIsXHJcbiAgXCJ0b2dnbGVIb3ZlclwiLFxyXG4gIFwicmVzZXRWaWV3c1wiLFxyXG4gIFwidG9JbWFnZVwiLFxyXG4gIFwic2VuZERhdGFUb0Nsb3VkXCIsXHJcbiAgXCJ0b2dnbGVTcGlrZWxpbmVzXCIsXHJcbiAgXCJyZXNldFZpZXdNYXBib3hcIixcclxuXTtcclxuXHJcbi8vIHRoaXMgaXMganVzdCB0aGUgUGxvdGx5Lmljb25zLnBlbmNpbCBidXQgSSBjYW4ndCBiZSBib3RoZXJlZCB0byBmaXggdGhlIGltcG9ydHMgYXQgdGhpcyB0aW1lLlxyXG5leHBvcnQgY29uc3QgdG9nZ2xlRXZlbnRDcmVhdGlvbkljb24gPSB7XHJcbiAgd2lkdGg6IDE3OTIsXHJcbiAgaGVpZ2h0OiAxNzkyLFxyXG4gIHBhdGg6XHJcbiAgICBcIk00OTEgMTUzNmw5MS05MS0yMzUtMjM1LTkxIDkxdjEwN2gxMjh2MTI4aDEwN3ptNTIzLTkyOHEwLTIyLTIyLTIyLTEwIDAtMTcgN2wtNTQyIDU0MnEtNyA3LTcgMTcgMCAyMiAyMiAyMiAxMCAwIDE3LTdsNTQyLTU0MnE3LTcgNy0xN3ptLTU0LTE5Mmw0MTYgNDE2LTgzMiA4MzJoLTQxNnYtNDE2em02ODMgOTZxMCA1My0zNyA5MGwtMTY2IDE2Ni00MTYtNDE2IDE2Ni0xNjVxMzYtMzggOTAtMzggNTMgMCA5MSAzOGwyMzUgMjM0cTM3IDM5IDM3IDkxelwiLFxyXG4gIHRyYW5zZm9ybTogXCJtYXRyaXgoMSAwIDAgMSAwIDEpXCIsXHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2lkdGhPZk1lYW5XaW5kb3dJblNlY29uZHMoZnJvbSwgdG8sIG5Qb2ludHMgPSA1MTIpIHtcclxuICBsZXQgc2Vjb25kcyA9IE1hdGguYWJzKGRpZmZlcmVuY2VJblNlY29uZHModG8sIGZyb20pKTtcclxuXHJcbiAgcmV0dXJuIHNlY29uZHMgPj0gblBvaW50cyA/IE1hdGguZmxvb3Ioc2Vjb25kcyAvIG5Qb2ludHMpIDogMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VBbm5vdGF0aW9ucyh1aWRzLCBzdGF0ZSkge1xyXG4gIGNvbnN0IGV2ZW50Q29sb3JzID0ge1xyXG4gICAgd2FybmluZzogXCIjZjVhMDMwXCIsXHJcbiAgICBoaWdoOiBcIiNmN2E2MzBcIixcclxuICAgIGluZm86IFwiIzAwZGVlZVwiLFxyXG4gICAgZmFpbHVyZTogXCIjZmYwMDAwXCIsXHJcbiAgfTtcclxuXHJcbiAgbGV0IG9wYWNpdHkgPSAwLjI1O1xyXG5cclxuICBjb25zdCByZWxhdGVkX2V2ZW50cyA9IFtdO1xyXG5cclxuICBsZXQgZXZlbnRBbm5vdGF0aW9ucyA9IFtdLFxyXG4gICAgZXZlbnRTaGFwZXMgPSBbXTtcclxuXHJcbiAgbGV0IHN0YXJ0V2FzVHJ1bmNhdGVkID0gZmFsc2U7XHJcblxyXG4gIGZvciAoY29uc3QgdWlkIG9mIHVpZHMpIHtcclxuICAgIGZvciAoY29uc3QgZSBvZiBzdGF0ZS52aXNpYmxlRXZlbnRzKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICAoKGUubm9kZSAmJiBlLm5vZGUuaW5kZXhPZih1aWQpICE9PSAtMSkgfHxcclxuICAgICAgICAgIHN0YXRlLnBpbm5lZEV2ZW50cy5pbmRleE9mKGUuX2lkKSAhPT0gLTEpICYmXHJcbiAgICAgICAgcmVsYXRlZF9ldmVudHMuaW5kZXhPZihlKSA9PT0gLTFcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmVsYXRlZF9ldmVudHMucHVzaChlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZm9yIChjb25zdCBlIG9mIHJlbGF0ZWRfZXZlbnRzKSB7XHJcbiAgICBsZXQgZXZlbnRTdGFydCA9IGUuc3RhcnQgJiYgcGFyc2VJU08oZS5zdGFydCksXHJcbiAgICAgIGV2ZW50RW5kID0gZS5lbmQgJiYgcGFyc2VJU08oZS5lbmQpLFxyXG4gICAgICBldmVudENvbG9yID0gZXZlbnRDb2xvcnNbZS5zZXZlcml0eV0sXHJcbiAgICAgIHNlbGVjdGVkRnJvbSA9IHN0YXRlLnRpbWVTZWxlY3Rpb24uZnJvbSxcclxuICAgICAgc2VsZWN0ZWRUbyA9IHN0YXRlLnRpbWVTZWxlY3Rpb24udG87XHJcblxyXG4gICAgaWYgKCFpc1ZhbGlkKGV2ZW50RW5kKSkge1xyXG4gICAgICBldmVudEVuZCA9IHNlbGVjdGVkVG87XHJcbiAgICAgIG9wYWNpdHkgPSAwLjE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV2ZW50RW5kIDwgc2VsZWN0ZWRGcm9tIHx8IHNlbGVjdGVkVG8gPCBldmVudFN0YXJ0KSB7XHJcbiAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChldmVudFN0YXJ0IDwgc2VsZWN0ZWRGcm9tKSB7XHJcbiAgICAgIGV2ZW50U3RhcnQgPSBzZWxlY3RlZEZyb207XHJcbiAgICAgIHN0YXJ0V2FzVHJ1bmNhdGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGlmIChzZWxlY3RlZFRvIDwgZXZlbnRFbmQpIHtcclxuICAgICAgZXZlbnRFbmQgPSBzZWxlY3RlZFRvO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50QW5ub3RhdGlvbnMucHVzaCh7XHJcbiAgICAgIHg6IGV2ZW50U3RhcnQsXHJcbiAgICAgIHk6IDEuMDEgKyBzdGFydFdhc1RydW5jYXRlZCAqIDAuMjUsXHJcbiAgICAgIHhyZWY6IFwieFwiLFxyXG4gICAgICB5cmVmOiBcInBhcGVyXCIsXHJcbiAgICAgIHRleHRhbmdsZTogc3RhcnRXYXNUcnVuY2F0ZWQgPyAwIDogLTQ1LFxyXG4gICAgICBzaG93YXJyb3c6ICFzdGFydFdhc1RydW5jYXRlZCxcclxuICAgICAgdGV4dDogZS5kZXNjcmlwdGlvbixcclxuICAgIH0pO1xyXG5cclxuICAgIGV2ZW50U2hhcGVzLnB1c2goe1xyXG4gICAgICB4cmVmOiBcInhcIixcclxuICAgICAgeXJlZjogXCJwYXBlclwiLFxyXG4gICAgICB4MDogZXZlbnRTdGFydCxcclxuICAgICAgeDE6IGV2ZW50RW5kLFxyXG4gICAgICB5MDogMCxcclxuICAgICAgeTE6IDEsXHJcbiAgICAgIHR5cGU6IFwicmVjdFwiLFxyXG4gICAgICBsaW5lOiB7IHdpZHRoOiAwIH0sXHJcbiAgICAgIGZpbGxjb2xvcjogZXZlbnRDb2xvcixcclxuICAgICAgb3BhY2l0eTogb3BhY2l0eSxcclxuICAgIH0pO1xyXG5cclxuICAgIGV2ZW50U2hhcGVzLnB1c2goe1xyXG4gICAgICB4cmVmOiBcInhcIixcclxuICAgICAgeXJlZjogXCJwYXBlclwiLFxyXG4gICAgICB4MDogZXZlbnRTdGFydCxcclxuICAgICAgeDE6IGV2ZW50RW5kLFxyXG4gICAgICB5MDogMS4wMDEsXHJcbiAgICAgIHkxOiAxLjAwMSxcclxuICAgICAgdHlwZTogXCJsaW5lXCIsXHJcbiAgICAgIGxpbmU6IHsgd2lkdGg6IDEsIGNvbG9yOiBldmVudENvbG9yIH0sXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBbZXZlbnRBbm5vdGF0aW9ucywgZXZlbnRTaGFwZXNdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdW0oYSwgYikge1xyXG4gIHJldHVybiBhICsgYjtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVhbih2YWx1ZXMpIHtcclxuICByZXR1cm4gdmFsdWVzLnJlZHVjZShzdW0pIC8gdmFsdWVzLmxlbmd0aDtcclxufVxyXG5cclxuZnVuY3Rpb24gbWVhbl9hbmRfc2Rldih2YWx1ZXMpIHtcclxuICBjb25zdCBtID0gbWVhbih2YWx1ZXMpO1xyXG4gIGNvbnN0IHN0YW5kYXJkX2RldmlhdGlvbiA9IE1hdGguc3FydChcclxuICAgIHZhbHVlcy5tYXAoKHgpID0+ICh4IC0gbSkgKiogMikucmVkdWNlKHN1bSkgLyB2YWx1ZXMubGVuZ3RoXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIFttLCBzdGFuZGFyZF9kZXZpYXRpb25dO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXV0b3JhbmdlKHBsb3REYXRhLCBjb21wcmVzc0F4aXMgPSBmYWxzZSkge1xyXG4gIC8vIHNldCB0aGUgdmVydGljYWwgYXhpcyB0byBpbmNsdWRlIDIlIHBhZGRpbmcgYWJvdmUgYW5kXHJcbiAgLy8gYmVsb3cgdGhlIHN1cHJlbXVtIGFuZCBpbmZpbXVtIG9mIHRoZSBkYXRhIHNob3duLlxyXG4gIC8vXHJcbiAgLy8gd2hlbiBjb21wcmVzc0F4aXMgaXMgdHJ1ZSwgc2hvdyBhdCBtb3N0IDMgc3RhbmRhcmRcclxuICAvLyBkZXZpYXRpb25zIGFib3ZlIGFuZCBiZWxvdyB0aGUgbWVhbiwgc28gb3V0bGllcnMgZG9uJ3RcclxuICAvLyB0aHJvdyB0aGUgd2hvbGUgcGxvdCBvZmYuXHJcblxyXG4gIGlmICghcGxvdERhdGEpIHJldHVybiBbXTtcclxuXHJcbiAgbGV0IHJhbmdlID0gW0luZmluaXR5LCAtSW5maW5pdHldO1xyXG5cclxuICBmb3IgKGRhdHVtIGluIHBsb3REYXRhKSB7XHJcbiAgICBpZiAoXHJcbiAgICAgIHBsb3REYXRhW2RhdHVtXSAmJlxyXG4gICAgICBwbG90RGF0YVtkYXR1bV0uaGFzT3duUHJvcGVydHkoXCJ5XCIpICYmXHJcbiAgICAgIHBsb3REYXRhW2RhdHVtXS55ICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgQXJyYXkuaXNBcnJheShwbG90RGF0YVtkYXR1bV0ueSlcclxuICAgICkge1xyXG4gICAgICBjb25zdCB2YWx1ZXMgPSBwbG90RGF0YVtkYXR1bV0ueS5maWx0ZXIoKHYpID0+IHYgIT09IG51bGwgJiYgIWlzTmFOKHYpKTtcclxuICAgICAgY29uc3QgW20sIHNdID0gbWVhbl9hbmRfc2Rldih2YWx1ZXMpO1xyXG5cclxuICAgICAgaWYgKGNvbXByZXNzQXhpcykge1xyXG4gICAgICAgIHJhbmdlID0gW1xyXG4gICAgICAgICAgTWF0aC5taW4oXHJcbiAgICAgICAgICAgIHJhbmdlWzBdLFxyXG4gICAgICAgICAgICBNYXRoLm1heChcclxuICAgICAgICAgICAgICBNYXRoLm1pbiguLi52YWx1ZXMpICogMC45OCxcclxuICAgICAgICAgICAgICBNYXRoLm1pbihtIC0gTWF0aC5hYnMoMyAqIHMpLCAwLjk4ICogbSlcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKSxcclxuICAgICAgICAgIE1hdGgubWF4KFxyXG4gICAgICAgICAgICByYW5nZVsxXSxcclxuICAgICAgICAgICAgTWF0aC5taW4oXHJcbiAgICAgICAgICAgICAgTWF0aC5tYXgoLi4udmFsdWVzKSAqIDEuMDIsXHJcbiAgICAgICAgICAgICAgTWF0aC5tYXgobSArIE1hdGguYWJzKDMgKiBzKSwgMS4wMiAqIG0pXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICksXHJcbiAgICAgICAgXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByYW5nZSA9IFtcclxuICAgICAgICAgIE1hdGgubWluKHJhbmdlWzBdLCBNYXRoLm1pbiguLi52YWx1ZXMpICogMC45OCksXHJcbiAgICAgICAgICBNYXRoLm1heChyYW5nZVsxXSwgTWF0aC5tYXgoLi4udmFsdWVzKSAqIDEuMDIpLFxyXG4gICAgICAgIF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiByYW5nZTtcclxufVxyXG4iXX0=