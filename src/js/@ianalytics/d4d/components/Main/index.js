import React, { useState, useMemo, useEffect } from "react";
import { useStateValue } from "/@ianalytics/d4d/components/StateProvider";
import Xstyled from "@emotion/styled";
import SystemaAPI from "goog:io.ianalytics.d4d.api.systema";
import TimeSeriesPlot from "/@ianalytics/d4d/components/Plot/TimeSeriesPlot";
import DateRangePicker from "/@ianalytics/d4d/components/DateRangePicker";
const styled = Xstyled.default;
export default function Main(props) {
  const [state, dispatch] = useStateValue();
  const {
    mainView,
    timeSelection
  } = state; // console.log("Baishakhi")

  function appropriatePlot(unitGroup) {
    return /*#__PURE__*/React.createElement(TimeSeriesPlot, {
      key: "main-timeseries-plot-" + unitGroup,
      from: state.timeSelection.from,
      to: state.timeSelection.to,
      uids: unitGroup
    });
  }

  return useMemo(() => {
    const groups = state.selectedSystemaNodes && SystemaAPI.displayUnitGroups(state.selectedSystemaNodes);
    return /*#__PURE__*/React.createElement("div", {
      style: {
        width: "100%"
      }
    }, /*#__PURE__*/React.createElement(DateRangePicker, null), groups && groups.map(appropriatePlot));
  }, [mainView, timeSelection, state.selectedSystemaNodes]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzeC9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9NYWluL2luZGV4LmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwidXNlTWVtbyIsInVzZUVmZmVjdCIsInVzZVN0YXRlVmFsdWUiLCJYc3R5bGVkIiwiU3lzdGVtYUFQSSIsIlRpbWVTZXJpZXNQbG90IiwiRGF0ZVJhbmdlUGlja2VyIiwic3R5bGVkIiwiZGVmYXVsdCIsIk1haW4iLCJwcm9wcyIsInN0YXRlIiwiZGlzcGF0Y2giLCJtYWluVmlldyIsInRpbWVTZWxlY3Rpb24iLCJhcHByb3ByaWF0ZVBsb3QiLCJ1bml0R3JvdXAiLCJmcm9tIiwidG8iLCJncm91cHMiLCJzZWxlY3RlZFN5c3RlbWFOb2RlcyIsImRpc3BsYXlVbml0R3JvdXBzIiwid2lkdGgiLCJtYXAiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLEtBQVAsSUFBZ0JDLFFBQWhCLEVBQTBCQyxPQUExQixFQUFtQ0MsU0FBbkMsUUFBb0QsT0FBcEQ7QUFFQSxTQUFTQyxhQUFULFFBQThCLDJDQUE5QjtBQUNBLE9BQU9DLE9BQVAsTUFBb0IsaUJBQXBCO0FBRUEsT0FBT0MsVUFBUCxNQUF1QixvQ0FBdkI7QUFFQSxPQUFPQyxjQUFQLE1BQTJCLGlEQUEzQjtBQUNBLE9BQU9DLGVBQVAsTUFBNEIsNkNBQTVCO0FBRUEsTUFBTUMsTUFBTSxHQUFHSixPQUFPLENBQUNLLE9BQXZCO0FBRUEsZUFBZSxTQUFTQyxJQUFULENBQWNDLEtBQWQsRUFBcUI7QUFDbEMsUUFBTSxDQUFDQyxLQUFELEVBQVFDLFFBQVIsSUFBb0JWLGFBQWEsRUFBdkM7QUFFQSxRQUFNO0FBQUVXLElBQUFBLFFBQUY7QUFBWUMsSUFBQUE7QUFBWixNQUE4QkgsS0FBcEMsQ0FIa0MsQ0FJbEM7O0FBQ0EsV0FBU0ksZUFBVCxDQUF5QkMsU0FBekIsRUFBb0M7QUFDbEMsd0JBQ0Usb0JBQUMsY0FBRDtBQUNFLE1BQUEsR0FBRyxFQUFFLDBCQUEwQkEsU0FEakM7QUFFRSxNQUFBLElBQUksRUFBRUwsS0FBSyxDQUFDRyxhQUFOLENBQW9CRyxJQUY1QjtBQUdFLE1BQUEsRUFBRSxFQUFFTixLQUFLLENBQUNHLGFBQU4sQ0FBb0JJLEVBSDFCO0FBSUUsTUFBQSxJQUFJLEVBQUVGO0FBSlIsTUFERjtBQVFEOztBQUVELFNBQU9oQixPQUFPLENBQUMsTUFBTTtBQUNuQixVQUFNbUIsTUFBTSxHQUNWUixLQUFLLENBQUNTLG9CQUFOLElBQ0FoQixVQUFVLENBQUNpQixpQkFBWCxDQUE2QlYsS0FBSyxDQUFDUyxvQkFBbkMsQ0FGRjtBQUlBLHdCQUNFO0FBQUssTUFBQSxLQUFLLEVBQUU7QUFBRUUsUUFBQUEsS0FBSyxFQUFFO0FBQVQ7QUFBWixvQkFDRSxvQkFBQyxlQUFELE9BREYsRUFFR0gsTUFBTSxJQUFJQSxNQUFNLENBQUNJLEdBQVAsQ0FBV1IsZUFBWCxDQUZiLENBREY7QUFNRCxHQVhhLEVBV1gsQ0FBQ0YsUUFBRCxFQUFXQyxhQUFYLEVBQTBCSCxLQUFLLENBQUNTLG9CQUFoQyxDQVhXLENBQWQ7QUFZRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5pbXBvcnQgeyB1c2VTdGF0ZVZhbHVlIH0gZnJvbSBcIi9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9TdGF0ZVByb3ZpZGVyXCI7XHJcbmltcG9ydCBYc3R5bGVkIGZyb20gXCJAZW1vdGlvbi9zdHlsZWRcIjtcclxuXHJcbmltcG9ydCBTeXN0ZW1hQVBJIGZyb20gXCJnb29nOmlvLmlhbmFseXRpY3MuZDRkLmFwaS5zeXN0ZW1hXCI7XHJcblxyXG5pbXBvcnQgVGltZVNlcmllc1Bsb3QgZnJvbSBcIi9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9QbG90L1RpbWVTZXJpZXNQbG90XCI7XHJcbmltcG9ydCBEYXRlUmFuZ2VQaWNrZXIgZnJvbSBcIi9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJcIjtcclxuXHJcbmNvbnN0IHN0eWxlZCA9IFhzdHlsZWQuZGVmYXVsdDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1haW4ocHJvcHMpIHtcclxuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IHVzZVN0YXRlVmFsdWUoKTtcclxuXHJcbiAgY29uc3QgeyBtYWluVmlldywgdGltZVNlbGVjdGlvbiB9ID0gc3RhdGU7XHJcbiAgLy8gY29uc29sZS5sb2coXCJCYWlzaGFraGlcIilcclxuICBmdW5jdGlvbiBhcHByb3ByaWF0ZVBsb3QodW5pdEdyb3VwKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8VGltZVNlcmllc1Bsb3RcclxuICAgICAgICBrZXk9e1wibWFpbi10aW1lc2VyaWVzLXBsb3QtXCIgKyB1bml0R3JvdXB9XHJcbiAgICAgICAgZnJvbT17c3RhdGUudGltZVNlbGVjdGlvbi5mcm9tfVxyXG4gICAgICAgIHRvPXtzdGF0ZS50aW1lU2VsZWN0aW9uLnRvfVxyXG4gICAgICAgIHVpZHM9e3VuaXRHcm91cH1cclxuICAgICAgLz5cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdXNlTWVtbygoKSA9PiB7XHJcbiAgICBjb25zdCBncm91cHMgPVxyXG4gICAgICBzdGF0ZS5zZWxlY3RlZFN5c3RlbWFOb2RlcyAmJlxyXG4gICAgICBTeXN0ZW1hQVBJLmRpc3BsYXlVbml0R3JvdXBzKHN0YXRlLnNlbGVjdGVkU3lzdGVtYU5vZGVzKTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IHN0eWxlPXt7IHdpZHRoOiBcIjEwMCVcIiB9fT5cclxuICAgICAgICA8RGF0ZVJhbmdlUGlja2VyIC8+XHJcbiAgICAgICAge2dyb3VwcyAmJiBncm91cHMubWFwKGFwcHJvcHJpYXRlUGxvdCl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9LCBbbWFpblZpZXcsIHRpbWVTZWxlY3Rpb24sIHN0YXRlLnNlbGVjdGVkU3lzdGVtYU5vZGVzXSk7XHJcbn1cclxuIl19