import React, { useState } from "react";

const Filter = props => {
  let defaultOption = localStorage.getItem(props.localStorageVar) && !props.resetOnReload ? localStorage.getItem(props.localStorageVar) : props.defaultOption;
  const [selected, setSelected] = useState(props.options[defaultOption]);

  function selectOption(option) {
    setSelected(option);
    localStorage.setItem(props.localStorageVar, props.options.indexOf(option));
    props.callbackFunc(option);
  }

  const options = props.options.map((o, i) => /*#__PURE__*/React.createElement("button", {
    key: i,
    value: o,
    onClick: e => selectOption(e.target.value),
    className: selected === o && props.theme === "dark" ? "option-selected-dark" : selected === o && props.theme === "light" ? "option-selected-light" : selected !== o && props.theme === "dark" ? "filter-option-dark" : "filter-option-light"
  }, o));
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    className: props.theme === "dark" ? "filter-dark" : "filter-light"
  }, "Filter"), " ", /*#__PURE__*/React.createElement("div", {
    className: "filter-options"
  }, options));
};

export default Filter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2pzeC9AaWFuYWx5dGljcy9kNGQvY29tcG9uZW50cy9saWIvRmlsdGVyLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZVN0YXRlIiwiRmlsdGVyIiwicHJvcHMiLCJkZWZhdWx0T3B0aW9uIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImxvY2FsU3RvcmFnZVZhciIsInJlc2V0T25SZWxvYWQiLCJzZWxlY3RlZCIsInNldFNlbGVjdGVkIiwib3B0aW9ucyIsInNlbGVjdE9wdGlvbiIsIm9wdGlvbiIsInNldEl0ZW0iLCJpbmRleE9mIiwiY2FsbGJhY2tGdW5jIiwibWFwIiwibyIsImkiLCJlIiwidGFyZ2V0IiwidmFsdWUiLCJ0aGVtZSJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsS0FBUCxJQUFnQkMsUUFBaEIsUUFBZ0MsT0FBaEM7O0FBRUEsTUFBTUMsTUFBTSxHQUFJQyxLQUFELElBQVc7QUFDeEIsTUFBSUMsYUFBYSxHQUNmQyxZQUFZLENBQUNDLE9BQWIsQ0FBcUJILEtBQUssQ0FBQ0ksZUFBM0IsS0FBK0MsQ0FBQ0osS0FBSyxDQUFDSyxhQUF0RCxHQUNJSCxZQUFZLENBQUNDLE9BQWIsQ0FBcUJILEtBQUssQ0FBQ0ksZUFBM0IsQ0FESixHQUVJSixLQUFLLENBQUNDLGFBSFo7QUFLQSxRQUFNLENBQUNLLFFBQUQsRUFBV0MsV0FBWCxJQUEwQlQsUUFBUSxDQUFDRSxLQUFLLENBQUNRLE9BQU4sQ0FBY1AsYUFBZCxDQUFELENBQXhDOztBQUVBLFdBQVNRLFlBQVQsQ0FBc0JDLE1BQXRCLEVBQThCO0FBQzVCSCxJQUFBQSxXQUFXLENBQUNHLE1BQUQsQ0FBWDtBQUNBUixJQUFBQSxZQUFZLENBQUNTLE9BQWIsQ0FBcUJYLEtBQUssQ0FBQ0ksZUFBM0IsRUFBNENKLEtBQUssQ0FBQ1EsT0FBTixDQUFjSSxPQUFkLENBQXNCRixNQUF0QixDQUE1QztBQUNBVixJQUFBQSxLQUFLLENBQUNhLFlBQU4sQ0FBbUJILE1BQW5CO0FBQ0Q7O0FBRUQsUUFBTUYsT0FBTyxHQUFHUixLQUFLLENBQUNRLE9BQU4sQ0FBY00sR0FBZCxDQUFrQixDQUFDQyxDQUFELEVBQUlDLENBQUosa0JBQ2hDO0FBQ0UsSUFBQSxHQUFHLEVBQUVBLENBRFA7QUFFRSxJQUFBLEtBQUssRUFBRUQsQ0FGVDtBQUdFLElBQUEsT0FBTyxFQUFHRSxDQUFELElBQU9SLFlBQVksQ0FBQ1EsQ0FBQyxDQUFDQyxNQUFGLENBQVNDLEtBQVYsQ0FIOUI7QUFJRSxJQUFBLFNBQVMsRUFDUGIsUUFBUSxLQUFLUyxDQUFiLElBQWtCZixLQUFLLENBQUNvQixLQUFOLEtBQWdCLE1BQWxDLEdBQ0ksc0JBREosR0FFSWQsUUFBUSxLQUFLUyxDQUFiLElBQWtCZixLQUFLLENBQUNvQixLQUFOLEtBQWdCLE9BQWxDLEdBQ0EsdUJBREEsR0FFQWQsUUFBUSxLQUFLUyxDQUFiLElBQWtCZixLQUFLLENBQUNvQixLQUFOLEtBQWdCLE1BQWxDLEdBQ0Esb0JBREEsR0FFQTtBQVhSLEtBY0dMLENBZEgsQ0FEYyxDQUFoQjtBQW1CQSxzQkFDRSw4Q0FDRTtBQUNFLElBQUEsU0FBUyxFQUFFZixLQUFLLENBQUNvQixLQUFOLEtBQWdCLE1BQWhCLEdBQXlCLGFBQXpCLEdBQXlDO0FBRHRELGNBREYsRUFLWSxHQUxaLGVBTUU7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLEtBQWlDWixPQUFqQyxDQU5GLENBREY7QUFVRCxDQTNDRDs7QUE2Q0EsZUFBZVQsTUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5cclxuY29uc3QgRmlsdGVyID0gKHByb3BzKSA9PiB7XHJcbiAgbGV0IGRlZmF1bHRPcHRpb24gPVxyXG4gICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvcHMubG9jYWxTdG9yYWdlVmFyKSAmJiAhcHJvcHMucmVzZXRPblJlbG9hZFxyXG4gICAgICA/IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb3BzLmxvY2FsU3RvcmFnZVZhcilcclxuICAgICAgOiBwcm9wcy5kZWZhdWx0T3B0aW9uO1xyXG5cclxuICBjb25zdCBbc2VsZWN0ZWQsIHNldFNlbGVjdGVkXSA9IHVzZVN0YXRlKHByb3BzLm9wdGlvbnNbZGVmYXVsdE9wdGlvbl0pO1xyXG5cclxuICBmdW5jdGlvbiBzZWxlY3RPcHRpb24ob3B0aW9uKSB7XHJcbiAgICBzZXRTZWxlY3RlZChvcHRpb24pO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocHJvcHMubG9jYWxTdG9yYWdlVmFyLCBwcm9wcy5vcHRpb25zLmluZGV4T2Yob3B0aW9uKSk7XHJcbiAgICBwcm9wcy5jYWxsYmFja0Z1bmMob3B0aW9uKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG9wdGlvbnMgPSBwcm9wcy5vcHRpb25zLm1hcCgobywgaSkgPT4gKFxyXG4gICAgPGJ1dHRvblxyXG4gICAgICBrZXk9e2l9XHJcbiAgICAgIHZhbHVlPXtvfVxyXG4gICAgICBvbkNsaWNrPXsoZSkgPT4gc2VsZWN0T3B0aW9uKGUudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgY2xhc3NOYW1lPXtcclxuICAgICAgICBzZWxlY3RlZCA9PT0gbyAmJiBwcm9wcy50aGVtZSA9PT0gXCJkYXJrXCJcclxuICAgICAgICAgID8gXCJvcHRpb24tc2VsZWN0ZWQtZGFya1wiXHJcbiAgICAgICAgICA6IHNlbGVjdGVkID09PSBvICYmIHByb3BzLnRoZW1lID09PSBcImxpZ2h0XCJcclxuICAgICAgICAgID8gXCJvcHRpb24tc2VsZWN0ZWQtbGlnaHRcIlxyXG4gICAgICAgICAgOiBzZWxlY3RlZCAhPT0gbyAmJiBwcm9wcy50aGVtZSA9PT0gXCJkYXJrXCJcclxuICAgICAgICAgID8gXCJmaWx0ZXItb3B0aW9uLWRhcmtcIlxyXG4gICAgICAgICAgOiBcImZpbHRlci1vcHRpb24tbGlnaHRcIlxyXG4gICAgICB9XHJcbiAgICA+XHJcbiAgICAgIHtvfVxyXG4gICAgPC9idXR0b24+XHJcbiAgKSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8YnV0dG9uXHJcbiAgICAgICAgY2xhc3NOYW1lPXtwcm9wcy50aGVtZSA9PT0gXCJkYXJrXCIgPyBcImZpbHRlci1kYXJrXCIgOiBcImZpbHRlci1saWdodFwifVxyXG4gICAgICA+XHJcbiAgICAgICAgRmlsdGVyXHJcbiAgICAgIDwvYnV0dG9uPntcIiBcIn1cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWx0ZXItb3B0aW9uc1wiPntvcHRpb25zfTwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpbHRlcjtcclxuIl19