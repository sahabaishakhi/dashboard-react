import { parseISO, sub } from "date-fns";
export default defaultState = {
  systema: null,
  // the complete systema graph
  systemaNodes: {},
  expandedSystemaNodes: null,
  selectedSystemaNodes: [],
  mainView: "home",
  timeSelection: {
    mode: localStorage.globalFrom ? "CUSTOM" : "last hour",
    from: localStorage.globalFrom ? parseISO(localStorage.globalFrom) : sub(new Date(), {
      hours: 1
    }),
    to: localStorage.globalTo ? parseISO(localStorage.globalTo) : new Date(),
    intv: "10s",
    aggr: "mean"
  },
  timeUserSelection: [null, null],
  // holds a pair of Dates when users zoom and drag plots.
  plotDragMode: "zoom",
  // @cleanup for now, this is deferring to plotsAutoUpdate below. In future, it needs (?) its own user interface like the one in DateRangePicker.
  // eventsAutoUpdate: false, // continuously poll for events when EventLine is visible
  plotsAutoUpdate: false,
  // continuously poll for new data when timeSelection is not 'custom'.
  eventCreatorOpen: false,
  // event creation is a modal dialog
  eventCreatorData: {
    from: new Date(),
    to: new Date(),
    uid: "0"
  },
  visibleEvents: {}
  /* object with properties event UIDs and values corresponding
     visible events, that are events that should be visible according to the event
     filter settings */
  ,
  events: {},
  // object with properties event UIDs and values corresponding events
  eventFilter: {
    selectedSeverities: ["warning", "failure", "info"],
    excludedLabels: [],
    // list of `label._id`s of excluded labels
    freeText: "",
    // search string
    onlySelectedTimeRange: false,
    // show only events that lie in selected time range
    onlySelectedCreateTimeRange: false
    /* show only events that were created within
       selected time range */

  },
  pinnedEvents: [],
  // array of event uids
  eventDetailsOpen: false,
  // event details is a modal dialog
  eventDetailsEventUID: "",
  labels: [],
  // array of labels
  comments: [],
  // array of comment objects
  theme: null
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2pzeC9AaWFuYWx5dGljcy9kNGQvZGVmYXVsdFN0YXRlLmpzeCJdLCJuYW1lcyI6WyJwYXJzZUlTTyIsInN1YiIsImRlZmF1bHRTdGF0ZSIsInN5c3RlbWEiLCJzeXN0ZW1hTm9kZXMiLCJleHBhbmRlZFN5c3RlbWFOb2RlcyIsInNlbGVjdGVkU3lzdGVtYU5vZGVzIiwibWFpblZpZXciLCJ0aW1lU2VsZWN0aW9uIiwibW9kZSIsImxvY2FsU3RvcmFnZSIsImdsb2JhbEZyb20iLCJmcm9tIiwiRGF0ZSIsImhvdXJzIiwidG8iLCJnbG9iYWxUbyIsImludHYiLCJhZ2dyIiwidGltZVVzZXJTZWxlY3Rpb24iLCJwbG90RHJhZ01vZGUiLCJwbG90c0F1dG9VcGRhdGUiLCJldmVudENyZWF0b3JPcGVuIiwiZXZlbnRDcmVhdG9yRGF0YSIsInVpZCIsInZpc2libGVFdmVudHMiLCJldmVudHMiLCJldmVudEZpbHRlciIsInNlbGVjdGVkU2V2ZXJpdGllcyIsImV4Y2x1ZGVkTGFiZWxzIiwiZnJlZVRleHQiLCJvbmx5U2VsZWN0ZWRUaW1lUmFuZ2UiLCJvbmx5U2VsZWN0ZWRDcmVhdGVUaW1lUmFuZ2UiLCJwaW5uZWRFdmVudHMiLCJldmVudERldGFpbHNPcGVuIiwiZXZlbnREZXRhaWxzRXZlbnRVSUQiLCJsYWJlbHMiLCJjb21tZW50cyIsInRoZW1lIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxRQUFULEVBQW1CQyxHQUFuQixRQUE4QixVQUE5QjtBQUVBLGVBQWVDLFlBQVksR0FBRztBQUM1QkMsRUFBQUEsT0FBTyxFQUFFLElBRG1CO0FBQ2I7QUFDZkMsRUFBQUEsWUFBWSxFQUFFLEVBRmM7QUFHNUJDLEVBQUFBLG9CQUFvQixFQUFFLElBSE07QUFJNUJDLEVBQUFBLG9CQUFvQixFQUFFLEVBSk07QUFLNUJDLEVBQUFBLFFBQVEsRUFBRSxNQUxrQjtBQU01QkMsRUFBQUEsYUFBYSxFQUFFO0FBQ2JDLElBQUFBLElBQUksRUFBRUMsWUFBWSxDQUFDQyxVQUFiLEdBQTBCLFFBQTFCLEdBQXFDLFdBRDlCO0FBRWJDLElBQUFBLElBQUksRUFBRUYsWUFBWSxDQUFDQyxVQUFiLEdBQ0ZYLFFBQVEsQ0FBQ1UsWUFBWSxDQUFDQyxVQUFkLENBRE4sR0FFRlYsR0FBRyxDQUFDLElBQUlZLElBQUosRUFBRCxFQUFhO0FBQUVDLE1BQUFBLEtBQUssRUFBRTtBQUFULEtBQWIsQ0FKTTtBQUtiQyxJQUFBQSxFQUFFLEVBQUVMLFlBQVksQ0FBQ00sUUFBYixHQUF3QmhCLFFBQVEsQ0FBQ1UsWUFBWSxDQUFDTSxRQUFkLENBQWhDLEdBQTBELElBQUlILElBQUosRUFMakQ7QUFNYkksSUFBQUEsSUFBSSxFQUFFLEtBTk87QUFPYkMsSUFBQUEsSUFBSSxFQUFFO0FBUE8sR0FOYTtBQWU1QkMsRUFBQUEsaUJBQWlCLEVBQUUsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQWZTO0FBZUs7QUFDakNDLEVBQUFBLFlBQVksRUFBRSxNQWhCYztBQWtCNUI7QUFDQTtBQUVBQyxFQUFBQSxlQUFlLEVBQUUsS0FyQlc7QUFxQko7QUFDeEJDLEVBQUFBLGdCQUFnQixFQUFFLEtBdEJVO0FBc0JIO0FBQ3pCQyxFQUFBQSxnQkFBZ0IsRUFBRTtBQUFFWCxJQUFBQSxJQUFJLEVBQUUsSUFBSUMsSUFBSixFQUFSO0FBQW9CRSxJQUFBQSxFQUFFLEVBQUUsSUFBSUYsSUFBSixFQUF4QjtBQUFvQ1csSUFBQUEsR0FBRyxFQUFFO0FBQXpDLEdBdkJVO0FBd0I1QkMsRUFBQUEsYUFBYSxFQUFFO0FBQUc7QUFDcEI7QUFDQTtBQTFCOEI7QUEyQjVCQyxFQUFBQSxNQUFNLEVBQUUsRUEzQm9CO0FBMkJoQjtBQUNaQyxFQUFBQSxXQUFXLEVBQUU7QUFDWEMsSUFBQUEsa0JBQWtCLEVBQUUsQ0FBQyxTQUFELEVBQVksU0FBWixFQUF1QixNQUF2QixDQURUO0FBRVhDLElBQUFBLGNBQWMsRUFBRSxFQUZMO0FBRVM7QUFDcEJDLElBQUFBLFFBQVEsRUFBRSxFQUhDO0FBR0c7QUFDZEMsSUFBQUEscUJBQXFCLEVBQUUsS0FKWjtBQUltQjtBQUM5QkMsSUFBQUEsMkJBQTJCLEVBQUU7QUFBTTtBQUN2Qzs7QUFOZSxHQTVCZTtBQW9DNUJDLEVBQUFBLFlBQVksRUFBRSxFQXBDYztBQW9DVjtBQUNsQkMsRUFBQUEsZ0JBQWdCLEVBQUUsS0FyQ1U7QUFxQ0g7QUFDekJDLEVBQUFBLG9CQUFvQixFQUFFLEVBdENNO0FBdUM1QkMsRUFBQUEsTUFBTSxFQUFFLEVBdkNvQjtBQXVDaEI7QUFDWkMsRUFBQUEsUUFBUSxFQUFFLEVBeENrQjtBQXdDZDtBQUNkQyxFQUFBQSxLQUFLLEVBQUU7QUF6Q3FCLENBQTlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2VJU08sIHN1YiB9IGZyb20gXCJkYXRlLWZuc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFN0YXRlID0ge1xyXG4gIHN5c3RlbWE6IG51bGwsIC8vIHRoZSBjb21wbGV0ZSBzeXN0ZW1hIGdyYXBoXHJcbiAgc3lzdGVtYU5vZGVzOiB7fSxcclxuICBleHBhbmRlZFN5c3RlbWFOb2RlczogbnVsbCxcclxuICBzZWxlY3RlZFN5c3RlbWFOb2RlczogW10sXHJcbiAgbWFpblZpZXc6IFwiaG9tZVwiLFxyXG4gIHRpbWVTZWxlY3Rpb246IHtcclxuICAgIG1vZGU6IGxvY2FsU3RvcmFnZS5nbG9iYWxGcm9tID8gXCJDVVNUT01cIiA6IFwibGFzdCBob3VyXCIsXHJcbiAgICBmcm9tOiBsb2NhbFN0b3JhZ2UuZ2xvYmFsRnJvbVxyXG4gICAgICA/IHBhcnNlSVNPKGxvY2FsU3RvcmFnZS5nbG9iYWxGcm9tKVxyXG4gICAgICA6IHN1YihuZXcgRGF0ZSgpLCB7IGhvdXJzOiAxIH0pLFxyXG4gICAgdG86IGxvY2FsU3RvcmFnZS5nbG9iYWxUbyA/IHBhcnNlSVNPKGxvY2FsU3RvcmFnZS5nbG9iYWxUbykgOiBuZXcgRGF0ZSgpLFxyXG4gICAgaW50djogXCIxMHNcIixcclxuICAgIGFnZ3I6IFwibWVhblwiLFxyXG4gIH0sXHJcbiAgdGltZVVzZXJTZWxlY3Rpb246IFtudWxsLCBudWxsXSwgLy8gaG9sZHMgYSBwYWlyIG9mIERhdGVzIHdoZW4gdXNlcnMgem9vbSBhbmQgZHJhZyBwbG90cy5cclxuICBwbG90RHJhZ01vZGU6IFwiem9vbVwiLFxyXG5cclxuICAvLyBAY2xlYW51cCBmb3Igbm93LCB0aGlzIGlzIGRlZmVycmluZyB0byBwbG90c0F1dG9VcGRhdGUgYmVsb3cuIEluIGZ1dHVyZSwgaXQgbmVlZHMgKD8pIGl0cyBvd24gdXNlciBpbnRlcmZhY2UgbGlrZSB0aGUgb25lIGluIERhdGVSYW5nZVBpY2tlci5cclxuICAvLyBldmVudHNBdXRvVXBkYXRlOiBmYWxzZSwgLy8gY29udGludW91c2x5IHBvbGwgZm9yIGV2ZW50cyB3aGVuIEV2ZW50TGluZSBpcyB2aXNpYmxlXHJcblxyXG4gIHBsb3RzQXV0b1VwZGF0ZTogZmFsc2UsIC8vIGNvbnRpbnVvdXNseSBwb2xsIGZvciBuZXcgZGF0YSB3aGVuIHRpbWVTZWxlY3Rpb24gaXMgbm90ICdjdXN0b20nLlxyXG4gIGV2ZW50Q3JlYXRvck9wZW46IGZhbHNlLCAvLyBldmVudCBjcmVhdGlvbiBpcyBhIG1vZGFsIGRpYWxvZ1xyXG4gIGV2ZW50Q3JlYXRvckRhdGE6IHsgZnJvbTogbmV3IERhdGUoKSwgdG86IG5ldyBEYXRlKCksIHVpZDogXCIwXCIgfSxcclxuICB2aXNpYmxlRXZlbnRzOiB7fSAvKiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIGV2ZW50IFVJRHMgYW5kIHZhbHVlcyBjb3JyZXNwb25kaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSBldmVudHMsIHRoYXQgYXJlIGV2ZW50cyB0aGF0IHNob3VsZCBiZSB2aXNpYmxlIGFjY29yZGluZyB0byB0aGUgZXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgc2V0dGluZ3MgKi8sXHJcbiAgZXZlbnRzOiB7fSwgLy8gb2JqZWN0IHdpdGggcHJvcGVydGllcyBldmVudCBVSURzIGFuZCB2YWx1ZXMgY29ycmVzcG9uZGluZyBldmVudHNcclxuICBldmVudEZpbHRlcjoge1xyXG4gICAgc2VsZWN0ZWRTZXZlcml0aWVzOiBbXCJ3YXJuaW5nXCIsIFwiZmFpbHVyZVwiLCBcImluZm9cIl0sXHJcbiAgICBleGNsdWRlZExhYmVsczogW10sIC8vIGxpc3Qgb2YgYGxhYmVsLl9pZGBzIG9mIGV4Y2x1ZGVkIGxhYmVsc1xyXG4gICAgZnJlZVRleHQ6IFwiXCIsIC8vIHNlYXJjaCBzdHJpbmdcclxuICAgIG9ubHlTZWxlY3RlZFRpbWVSYW5nZTogZmFsc2UsIC8vIHNob3cgb25seSBldmVudHMgdGhhdCBsaWUgaW4gc2VsZWN0ZWQgdGltZSByYW5nZVxyXG4gICAgb25seVNlbGVjdGVkQ3JlYXRlVGltZVJhbmdlOiBmYWxzZSAvKiBzaG93IG9ubHkgZXZlbnRzIHRoYXQgd2VyZSBjcmVhdGVkIHdpdGhpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCB0aW1lIHJhbmdlICovLFxyXG4gIH0sXHJcbiAgcGlubmVkRXZlbnRzOiBbXSwgLy8gYXJyYXkgb2YgZXZlbnQgdWlkc1xyXG4gIGV2ZW50RGV0YWlsc09wZW46IGZhbHNlLCAvLyBldmVudCBkZXRhaWxzIGlzIGEgbW9kYWwgZGlhbG9nXHJcbiAgZXZlbnREZXRhaWxzRXZlbnRVSUQ6IFwiXCIsXHJcbiAgbGFiZWxzOiBbXSwgLy8gYXJyYXkgb2YgbGFiZWxzXHJcbiAgY29tbWVudHM6IFtdLCAvLyBhcnJheSBvZiBjb21tZW50IG9iamVjdHNcclxuICB0aGVtZTogbnVsbCxcclxufTtcclxuIl19